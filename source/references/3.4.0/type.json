{"computer":{"providers":{"directoryservice":{"description":"Computer object management using DirectoryService on OS X.\nNote that these are distinctly different kinds of objects to 'hosts',\nas they require a MAC address and can have all sorts of policy attached to\nthem.\n\nThis provider only manages Computer objects in the local directory service\ndomain, not in remote directories.\n\nIf you wish to manage /etc/hosts on Mac OS X, then simply use the host\ntype as per other platforms.\n\n* Default for `operatingsystem` == `darwin`.","features":[]}},"description":"Computer object management using DirectoryService\non OS X.\n\nNote that these are distinctly different kinds of objects to 'hosts',\nas they require a MAC address and can have all sorts of policy attached to\nthem.\n\nThis provider only manages Computer objects in the local directory service\ndomain, not in remote directories.\n\nIf you wish to manage `/etc/hosts` file on Mac OS X, then simply use the host\ntype as per other platforms.\n\nThis type primarily exists to create localhost Computer objects that MCX\npolicy can then be attached to.\n\n**Autorequires:** If Puppet is managing the plist file representing a\nComputer object (located at `/var/db/dslocal/nodes/Default/computers/{name}.plist`),\nthe Computer resource will autorequire it.","features":{},"attributes":{"en_address":{"namevar":false,"description":"The MAC address of the primary network interface. Must match en0.","kind":"property"},"realname":{"namevar":false,"description":"The 'long' name of the computer record.","kind":"parameter"},"ip_address":{"namevar":false,"description":"The IP Address of the Computer object.","kind":"property"},"ensure":{"namevar":false,"description":"Control the existences of this computer record. Set this attribute to\n`present` to ensure the computer record exists.  Set it to `absent`\nto delete any computer records with this name\n\nValid values are `present`, `absent`.","kind":"property"},"name":{"namevar":true,"description":"The authoritative 'short' name of the computer record.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `computer`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"notify":{"providers":{},"description":"Sends an arbitrary message to the agent run-time log.","features":{},"attributes":{"message":{"namevar":false,"description":"The message to be sent to the log.","kind":"property"},"withpath":{"namevar":false,"description":"Whether to show the full object path. Defaults to false.\n\nValid values are `true`, `false`.","kind":"parameter"},"name":{"namevar":true,"description":"An arbitrary tag for your own reference; the name of the message.","kind":"parameter"}}},"vlan":{"providers":{"cisco":{"description":"Cisco switch/router provider for vlans.","features":[]}},"description":"Manages a VLAN on a router or switch.","features":{},"attributes":{"device_url":{"namevar":false,"description":"The URL of the router or switch maintaining this VLAN.","kind":"parameter"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"name":{"namevar":true,"description":"The numeric VLAN ID.\n\nValues can match `/^\\d+/`.","kind":"parameter"},"description":{"namevar":false,"description":"The VLAN's name.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `vlan`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"zpool":{"providers":{"zpool":{"description":"Provider for zpool.\n\n* Required binaries: `zpool`.","features":[]}},"description":"Manage zpools. Create and delete zpools. The provider WILL NOT SYNC, only report differences.\n\nSupports vdevs with mirrors, raidz, logs and spares.","features":{},"attributes":{"disk":{"namevar":false,"description":"The disk(s) for this pool. Can be an array or a space separated string.","kind":"property"},"pool":{"namevar":true,"description":"The name for this pool.","kind":"parameter"},"mirror":{"namevar":false,"description":"List of all the devices to mirror for this pool. Each mirror should be a\nspace separated string:\n\n    mirror => [\"disk1 disk2\", \"disk3 disk4\"],","kind":"property"},"log":{"namevar":false,"description":"Log disks for this pool. This type does not currently support mirroring of log disks.","kind":"property"},"raidz":{"namevar":false,"description":"List of all the devices to raid for this pool. Should be an array of\nspace separated strings:\n\n    raidz => [\"disk1 disk2\", \"disk3 disk4\"],","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"spare":{"namevar":false,"description":"Spare disk(s) for this pool.","kind":"property"},"raid_parity":{"namevar":false,"description":"Determines parity when using the `raidz` parameter.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `zpool`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"exec":{"providers":{"posix":{"description":"Executes external binaries directly, without passing through a shell or\nperforming any interpolation. This is a safer and more predictable way\nto execute most commands, but prevents the use of globbing and shell\nbuilt-ins (including control logic like \"for\" and \"if\" statements).\n\n* Default for `feature` == `posix`.","features":[]},"shell":{"description":"Passes the provided command through `/bin/sh`; only available on\nPOSIX systems. This allows the use of shell globbing and built-ins, and\ndoes not require that the path to a command be fully-qualified. Although\nthis can be more convenient than the `posix` provider, it also means that\nyou need to be more careful with escaping; as ever, with great power comes\netc. etc.\n\nThis provider closely resembles the behavior of the `exec` type\nin Puppet 0.25.x.","features":[]},"windows":{"description":"Execute external binaries on Windows systems. As with the `posix`\nprovider, this provider directly calls the command with the arguments\ngiven, without passing it through a shell or performing any interpolation.\nTo use shell built-ins --- that is, to emulate the `shell` provider on\nWindows --- a command must explicitly invoke the shell:\n\n    exec {'echo foo':\n      command => 'cmd.exe /c echo \"foo\"',\n    }\n\nIf no extension is specified for a command, Windows will use the `PATHEXT`\nenvironment variable to locate the executable.\n\n**Note on PowerShell scripts:** PowerShell's default `restricted`\nexecution policy doesn't allow it to run saved scripts. To run PowerShell\nscripts, specify the `remotesigned` execution policy as part of the\ncommand:\n\n    exec { 'test':\n      path    => 'C:/Windows/System32/WindowsPowerShell/v1.0',\n      command => 'powershell -executionpolicy remotesigned -file C:/test.ps1',\n    }\n\n* Default for `operatingsystem` == `windows`.","features":[]}},"description":"Executes external commands.  It is critical that all commands\nexecuted using this mechanism can be run multiple times without\nharm, i.e., they are *idempotent*.  One useful way to create idempotent\ncommands is to use the checks like `creates` to avoid running the\ncommand unless some condition is met.\n\nNote that you can restrict an `exec` to only run when it receives\nevents by using the `refreshonly` parameter; this is a useful way to\nhave your configuration respond to events with arbitrary commands.\n\nNote also that if an `exec` receives an event from another resource,\nit will get executed again (or execute the command specified in `refresh`, if there is one).\n\nThere is a strong tendency to use `exec` to do whatever work Puppet\ncan't already do; while this is obviously acceptable (and unavoidable)\nin the short term, it is highly recommended to migrate work from `exec`\nto native Puppet types as quickly as possible.  If you find that\nyou are doing a lot of work with `exec`, please at least notify\nus at Puppet Labs what you are doing, and hopefully we can work with\nyou to get a native resource type for the work you are doing.\n\n**Autorequires:** If Puppet is managing an exec's cwd or the executable\nfile used in an exec's command, the exec resource will autorequire those\nfiles. If Puppet is managing the user that an exec should run as, the\nexec resource will autorequire that user.","features":{},"attributes":{"path":{"namevar":false,"description":"The search path used for command execution.\nCommands must be fully qualified if no path is specified.  Paths\ncan be specified as an array or as a ':' separated list.","kind":"parameter"},"tries":{"namevar":false,"description":"The number of times execution of the command should be tried.\nDefaults to '1'. This many attempts will be made to execute\nthe command until an acceptable return code is returned.\nNote that the timeout paramater applies to each try rather than\nto the complete set of tries.","kind":"parameter"},"returns":{"namevar":false,"description":"The expected return code(s).  An error will be returned if the\nexecuted command returns something else.  Defaults to 0. Can be\nspecified as an array of acceptable return codes or a single value.","kind":"property"},"group":{"namevar":false,"description":"The group to run the command as.  This seems to work quite\nhaphazardly on different platforms -- it is a platform issue\nnot a Ruby or Puppet one, since the same variety exists when\nrunning commands as different users in the shell.","kind":"parameter"},"refresh":{"namevar":false,"description":"How to refresh this command.  By default, the exec is just\ncalled again when it receives an event from another resource,\nbut this parameter allows you to define a different command\nfor refreshing.","kind":"parameter"},"umask":{"namevar":false,"description":"Sets the umask to be used while executing this command","kind":"parameter"},"try_sleep":{"namevar":false,"description":"The time to sleep in seconds between 'tries'.","kind":"parameter"},"onlyif":{"namevar":false,"description":"If this parameter is set, then this `exec` will only run if\nthe command returns 0.  For example:\n\n    exec { \"logrotate\":\n      path   => \"/usr/bin:/usr/sbin:/bin\",\n      onlyif => \"test `du /var/log/messages | cut -f1` -gt 100000\"\n    }\n\nThis would run `logrotate` only if that test returned true.\n\nNote that this command follows the same rules as the main command,\nwhich is to say that it must be fully qualified if the path is not set.\n\nAlso note that onlyif can take an array as its value, e.g.:\n\n    onlyif => [\"test -f /tmp/file1\", \"test -f /tmp/file2\"]\n\nThis will only run the exec if _all_ conditions in the array return true.","kind":"parameter"},"cwd":{"namevar":false,"description":"The directory from which to run the command.  If\nthis directory does not exist, the command will fail.","kind":"parameter"},"refreshonly":{"namevar":false,"description":"The command should only be run as a\nrefresh mechanism for when a dependent object is changed.  It only\nmakes sense to use this option when this command depends on some\nother object; it is useful for triggering an action:\n\n    # Pull down the main aliases file\n    file { \"/etc/aliases\":\n      source => \"puppet://server/module/aliases\"\n    }\n\n    # Rebuild the database, but only when the file changes\n    exec { newaliases:\n      path        => [\"/usr/bin\", \"/usr/sbin\"],\n      subscribe   => File[\"/etc/aliases\"],\n      refreshonly => true\n    }\n\nNote that only `subscribe` and `notify` can trigger actions, not `require`,\nso it only makes sense to use `refreshonly` with `subscribe` or `notify`.\n\nValid values are `true`, `false`.","kind":"parameter"},"command":{"namevar":true,"description":"The actual command to execute.  Must either be fully qualified\nor a search path for the command must be provided.  If the command\nsucceeds, any output produced will be logged at the instance's\nnormal log level (usually `notice`), but if the command fails\n(meaning its return code does not match the specified code) then\nany output is logged at the `err` log level.","kind":"parameter"},"environment":{"namevar":false,"description":"Any additional environment variables you want to set for a\ncommand.  Note that if you use this to set PATH, it will override\nthe `path` attribute.  Multiple environment variables should be\nspecified as an array.","kind":"parameter"},"timeout":{"namevar":false,"description":"The maximum time the command should take.  If the command takes\nlonger than the timeout, the command is considered to have failed\nand will be stopped. The timeout is specified in seconds. The default\ntimeout is 300 seconds and you can set it to 0 to disable the timeout.","kind":"parameter"},"creates":{"namevar":false,"description":"A file to look for before running the command. The command will\nonly run if the file **doesn't exist.**\n\nThis parameter doesn't cause Puppet to create a file; it is only\nuseful if **the command itself** creates a file.\n\n    exec { \"tar -xf /Volumes/nfs02/important.tar\":\n      cwd     => \"/var/tmp\",\n      creates => \"/var/tmp/myfile\",\n      path    => [\"/usr/bin\", \"/usr/sbin\"]\n    }\n\nIn this example, `myfile` is assumed to be a file inside\n`important.tar`. If it is ever deleted, the exec will bring it\nback by re-extracting the tarball. If `important.tar` does **not**\nactually contain `myfile`, the exec will keep running every time\nPuppet runs.","kind":"parameter"},"logoutput":{"namevar":false,"description":"Whether to log command output in addition to logging the\nexit code.  Defaults to `on_failure`, which only logs the output\nwhen the command has an exit code that does not match any value\nspecified by the `returns` attribute.\n\nValid values are `true`, `false`, `on_failure`.","kind":"parameter"},"user":{"namevar":false,"description":"The user to run the command as.  Note that if you\nuse this then any error output is not currently captured.  This\nis because of a bug within Ruby.  If you are using Puppet to\ncreate this user, the exec will automatically require the user,\nas long as it is specified by name.\n\nPlease note that the $HOME environment variable is not automatically set\nwhen using this attribute.","kind":"parameter"},"unless":{"namevar":false,"description":"If this parameter is set, then this `exec` will run unless\nthe command returns 0.  For example:\n\n    exec { \"/bin/echo root >> /usr/lib/cron/cron.allow\":\n      path   => \"/usr/bin:/usr/sbin:/bin\",\n      unless => \"grep root /usr/lib/cron/cron.allow 2>/dev/null\"\n    }\n\nThis would add `root` to the cron.allow file (on Solaris) unless\n`grep` determines it's already there.\n\nNote that this command follows the same rules as the main command,\nwhich is to say that it must be fully qualified if the path is not set.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `exec`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"macauthorization":{"providers":{"macauthorization":{"description":"Manage Mac OS X authorization database rules and rights.\n\n* Required binaries: `/usr/bin/security`, `/usr/bin/sw_vers`.\n* Default for `operatingsystem` == `darwin`.","features":[]}},"description":"Manage the Mac OS X authorization database. See the\n[Apple developer site](http://developer.apple.com/documentation/Security/Conceptual/Security_Overview/Security_Services/chapter_4_section_5.html)\nfor more information.\n\nNote that authorization store directives with hyphens in their names have\nbeen renamed to use underscores, as Puppet does not react well to hyphens\nin identifiers.\n\n**Autorequires:** If Puppet is managing the `/etc/authorization` file, each\nmacauthorization resource will autorequire it.","features":{},"attributes":{"authenticate_user":{"namevar":false,"description":"Corresponds to `authenticate-user` in the authorization store.\n\nValid values are `true`, `false`.","kind":"property"},"tries":{"namevar":false,"description":"The number of tries allowed.","kind":"property"},"shared":{"namevar":false,"description":"Whether the Security Server should mark the credentials used to gain\nthis right as shared. The Security Server may use any shared credentials\nto authorize this right. For maximum security, set sharing to false so\ncredentials stored by the Security Server for one application may not be\nused by another application.\n\nValid values are `true`, `false`.","kind":"property"},"auth_class":{"namevar":false,"description":"Corresponds to `class` in the authorization store; renamed due\nto 'class' being a reserved word in Puppet.\n\nValid values are `user`, `evaluate-mechanisms`, `allow`, `deny`, `rule`.","kind":"property"},"group":{"namevar":false,"description":"A group which the user must authenticate as a member of. This\nmust be a single group.","kind":"property"},"timeout":{"namevar":false,"description":"The number of seconds in which the credential used by this rule will\nexpire. For maximum security where the user must authenticate every time,\nset the timeout to 0. For minimum security, remove the timeout attribute\nso the user authenticates only once per session.","kind":"property"},"k_of_n":{"namevar":false,"description":"How large a subset of rule mechanisms must succeed for successful\nauthentication. If there are 'n' mechanisms, then 'k' (the integer value\nof this parameter) mechanisms must succeed. The most common setting for\nthis parameter is `1`. If `k-of-n` is not set, then every mechanism ---\nthat is, 'n-of-n' --- must succeed.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"rule":{"namevar":false,"description":"The rule(s) that this right refers to.","kind":"property"},"name":{"namevar":true,"description":"The name of the right or rule to be managed.\nCorresponds to `key` in Authorization Services. The key is the name\nof a rule. A key uses the same naming conventions as a right. The\nSecurity Server uses a rule's key to match the rule with a right.\nWildcard keys end with a '.'. The generic rule has an empty key value.\nAny rights that do not match a specific rule use the generic rule.","kind":"parameter"},"mechanisms":{"namevar":false,"description":"An array of suitable mechanisms.","kind":"property"},"comment":{"namevar":false,"description":"The `comment` attribute for authorization resources.","kind":"property"},"allow_root":{"namevar":false,"description":"Corresponds to `allow-root` in the authorization store. Specifies\nwhether a right should be allowed automatically if the requesting process\nis running with `uid == 0`.  AuthorizationServices defaults this attribute\nto false if not specified.\n\nValid values are `true`, `false`.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `macauthorization`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"session_owner":{"namevar":false,"description":"Whether the session owner automatically matches this rule or right.\nCorresponds to `session-owner` in the authorization store.\n\nValid values are `true`, `false`.","kind":"property"},"auth_type":{"namevar":false,"description":"Type --- this can be a `right` or a `rule`. The `comment` type has\nnot yet been implemented.\n\nValid values are `right`, `rule`.","kind":"property"}}},"nagios_contact":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type contact.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_contact.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"can_submit_commands":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_notification_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"address2":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contactgroups":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"service_notification_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"address3":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_notifications_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_notification_commands":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"address4":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"service_notifications_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"service_notification_commands":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The target.","kind":"property"},"address5":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_notification_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"alias":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"retain_status_information":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"pager":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"address6":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"service_notification_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contact_name":{"namevar":true,"description":"The name of this nagios_contact resource.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_contact`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"retain_nonstatus_information":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"address1":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"email":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"package":{"providers":{"openbsd":{"description":"OpenBSD's form of `pkg_add` support.\n\n* Required binaries: `pkg_add`, `pkg_delete`, `pkg_info`.\n* Default for `operatingsystem` == `openbsd`.\n* Supported features: `install_options`, `installable`, `purgeable`, `uninstall_options`, `uninstallable`, `versionable`.","features":["install_options","installable","purgeable","uninstall_options","uninstallable","versionable"]},"aptrpm":{"description":"Package management via `apt-get` ported to `rpm`.\n\n* Required binaries: `apt-cache`, `apt-get`, `rpm`.\n* Supported features: `installable`, `purgeable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","purgeable","uninstallable","upgradeable","versionable"]},"fink":{"description":"Package management via `fink`.\n\n* Required binaries: `/sw/bin/apt-cache`, `/sw/bin/apt-get`, `/sw/bin/dpkg-query`, `/sw/bin/fink`.\n* Supported features: `holdable`, `installable`, `purgeable`, `uninstallable`, `upgradeable`, `versionable`.","features":["holdable","installable","purgeable","uninstallable","upgradeable","versionable"]},"nim":{"description":"Installation from an AIX NIM LPP source.  The `source` parameter is required\nfor this provider, and should specify the name of a NIM `lpp_source` resource\nthat is visible to the puppet agent machine.  This provider supports the\nmanagement of both BFF/installp and RPM packages.\n\nNote that package downgrades are *not* supported; if your resource specifies\na specific version number and there is already a newer version of the package\ninstalled on the machine, the resource will fail with an error message.\n\n* Required binaries: `/usr/bin/lslpp`, `/usr/sbin/nimclient`, `rpm`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","uninstallable","upgradeable","versionable"]},"pacman":{"description":"Support for the Package Manager Utility (pacman) used in Archlinux.\n\n* Required binaries: `/usr/bin/pacman`.\n* Default for `operatingsystem` == `archlinux`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`.","features":["installable","uninstallable","upgradeable"]},"pkg":{"description":"OpenSolaris image packaging system. See pkg(5) for more information\n\n* Required binaries: `/usr/bin/pkg`.\n* Default for `kernelrelease` == `5.11` and `osfamily` == `solaris`.\n* Supported features: `holdable`, `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["holdable","installable","uninstallable","upgradeable","versionable"]},"rpm":{"description":"RPM packaging support; should work anywhere with a working `rpm`\nbinary.\n\nThis provider supports the `install_options` attribute, which allows\ncommand-line flags to be passed to the RPM binary. Install options should be\nspecified as an array, where each element is either a string or a\n`{'--flag' => 'value'}` hash. (That hash example would be equivalent to a\n`'--flag=value'` string; the hash syntax is available as a convenience.)\n\n* Required binaries: `rpm`.\n* Supported features: `install_options`, `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["install_options","installable","uninstallable","upgradeable","versionable"]},"msi":{"description":"Windows package management by installing and removing MSIs.\n\nThe `msi` provider is deprecated. Use the `windows` provider instead.\n\n* Supported features: `install_options`, `installable`, `uninstall_options`, `uninstallable`.","features":["install_options","installable","uninstall_options","uninstallable"]},"sunfreeware":{"description":"Package management using sunfreeware.com's `pkg-get` command on Solaris.\nAt this point, support is exactly the same as `blastwave` support and\nhas not actually been tested.\n\n* Required binaries: `pkg-get`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`.","features":["installable","uninstallable","upgradeable"]},"apt":{"description":"Package management via `apt-get`.\n\n* Required binaries: `/usr/bin/apt-cache`, `/usr/bin/apt-get`, `/usr/bin/debconf-set-selections`.\n* Default for `operatingsystem` == `debian, ubuntu`.\n* Supported features: `holdable`, `installable`, `purgeable`, `uninstallable`, `upgradeable`, `versionable`.","features":["holdable","installable","purgeable","uninstallable","upgradeable","versionable"]},"rug":{"description":"Support for suse `rug` package manager.\n\n* Required binaries: `/usr/bin/rug`, `rpm`.\n* Default for `operatingsystem` == `suse, sles`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","uninstallable","upgradeable","versionable"]},"urpmi":{"description":"Support via `urpmi`.\n\n* Required binaries: `rpm`, `urpme`, `urpmi`, `urpmq`.\n* Default for `operatingsystem` == `mandriva, mandrake`.\n* Supported features: `installable`, `purgeable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","purgeable","uninstallable","upgradeable","versionable"]},"zypper":{"description":"Support for SuSE `zypper` package manager. Found in SLES10sp2+ and SLES11\n\n* Required binaries: `/usr/bin/zypper`.\n* Supported features: `install_options`, `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["install_options","installable","uninstallable","upgradeable","versionable"]},"aix":{"description":"Installation from an AIX software directory, using the AIX `installp`\ncommand.  The `source` parameter is required for this provider, and should\nbe set to the absolute path (on the puppet agent machine) of a directory\ncontaining one or more BFF package files.\n\nThe `installp` command will generate a table of contents file (named `.toc`)\nin this directory, and the `name` parameter (or resource title) that you\nspecify for your `package` resource must match a package name that exists\nin the `.toc` file.\n\nNote that package downgrades are *not* supported; if your resource specifies\na specific version number and there is already a newer version of the package\ninstalled on the machine, the resource will fail with an error message.\n\n* Required binaries: `/usr/bin/lslpp`, `/usr/sbin/installp`.\n* Default for `operatingsystem` == `aix`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","uninstallable","upgradeable","versionable"]},"dpkg":{"description":"Package management via `dpkg`.  Because this only uses `dpkg`\nand not `apt`, you must specify the source of any packages you want\nto manage.\n\n* Required binaries: `/usr/bin/dpkg-deb`, `/usr/bin/dpkg-query`, `/usr/bin/dpkg`.\n* Supported features: `holdable`, `installable`, `purgeable`, `uninstallable`, `upgradeable`.","features":["holdable","installable","purgeable","uninstallable","upgradeable"]},"blastwave":{"description":"Package management using Blastwave.org's `pkg-get` command on Solaris.\n\n* Required binaries: `pkg-get`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`.","features":["installable","uninstallable","upgradeable"]},"opkg":{"description":"Opkg packaging support. Common on OpenWrt and OpenEmbedded platforms\n\n* Required binaries: `opkg`.\n* Default for `operatingsystem` == `openwrt`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`.","features":["installable","uninstallable","upgradeable"]},"pip":{"description":"Python packages via `pip`.\n\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","uninstallable","upgradeable","versionable"]},"pkgin":{"description":"Package management using pkgin, a binary package manager for pkgsrc.\n\n* Required binaries: `pkgin`.\n* Default for `operatingsystem` == `dragonfly`.\n* Supported features: `installable`, `uninstallable`.","features":["installable","uninstallable"]},"portage":{"description":"Provides packaging support for Gentoo's portage system.\n\n* Required binaries: `/usr/bin/eix-update`, `/usr/bin/eix`, `/usr/bin/emerge`.\n* Default for `operatingsystem` == `gentoo`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","uninstallable","upgradeable","versionable"]},"ports":{"description":"Support for FreeBSD's ports.  Note that this, too, mixes packages and ports.\n\n* Required binaries: `/usr/local/sbin/pkg_deinstall`, `/usr/local/sbin/portupgrade`, `/usr/local/sbin/portversion`, `/usr/sbin/pkg_info`.\n* Default for `operatingsystem` == `freebsd`.\n* Supported features: `installable`, `purgeable`, `uninstallable`, `upgradeable`.","features":["installable","purgeable","uninstallable","upgradeable"]},"up2date":{"description":"Support for Red Hat's proprietary `up2date` package update\nmechanism.\n\n* Required binaries: `/usr/sbin/up2date-nox`.\n* Default for `lsbdistrelease` == `2.1, 3, 4` and `osfamily` == `redhat`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`.","features":["installable","uninstallable","upgradeable"]},"aptitude":{"description":"Package management via `aptitude`.\n\n* Required binaries: `/usr/bin/apt-cache`, `/usr/bin/aptitude`.\n* Supported features: `holdable`, `installable`, `purgeable`, `uninstallable`, `upgradeable`, `versionable`.","features":["holdable","installable","purgeable","uninstallable","upgradeable","versionable"]},"sun":{"description":"Sun's packaging system.  Requires that you specify the source for\nthe packages you're managing.\n\n* Required binaries: `/usr/bin/pkginfo`, `/usr/sbin/pkgadd`, `/usr/sbin/pkgrm`.\n* Default for `osfamily` == `solaris`.\n* Supported features: `install_options`, `installable`, `uninstallable`, `upgradeable`.","features":["install_options","installable","uninstallable","upgradeable"]},"hpux":{"description":"HP-UX's packaging system.\n\n* Required binaries: `/usr/sbin/swinstall`, `/usr/sbin/swlist`, `/usr/sbin/swremove`.\n* Default for `operatingsystem` == `hp-ux`.\n* Supported features: `installable`, `uninstallable`.","features":["installable","uninstallable"]},"pkgdmg":{"description":"Package management based on Apple's Installer.app and\nDiskUtility.app.  This package works by checking the contents of a\nDMG image for Apple pkg or mpkg files. Any number of pkg or mpkg\nfiles may exist in the root directory of the DMG file system.\nSubdirectories are not checked for packages.  See\n[the wiki docs on this provider](http://projects.puppetlabs.com/projects/puppet/wiki/Package_Management_With_Dmg_Patterns)\nfor more detail.\n\n* Required binaries: `/usr/bin/curl`, `/usr/bin/hdiutil`, `/usr/sbin/installer`.\n* Default for `operatingsystem` == `darwin`.\n* Supported features: `installable`.","features":["installable"]},"pkgutil":{"description":"Package management using Peter Bonivart's ``pkgutil`` command on Solaris.\n\n* Required binaries: `pkgutil`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`.","features":["installable","uninstallable","upgradeable"]},"apple":{"description":"Package management based on OS X's builtin packaging system.  This is\nessentially the simplest and least functional package system in existence --\nit only supports installation; no deletion or upgrades.  The provider will\nautomatically add the `.pkg` extension, so leave that off when specifying\nthe package name.\n\n* Required binaries: `/usr/sbin/installer`.\n* Supported features: `installable`.","features":["installable"]},"gem":{"description":"Ruby Gem support.  If a URL is passed via `source`, then that URL is used as the\nremote gem repository; if a source is present but is not a valid URL, it will be\ninterpreted as the path to a local gem file.  If source is not present at all,\nthe gem will be installed from the default gem repositories.\n\n* Required binaries: `gem`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","uninstallable","upgradeable","versionable"]},"macports":{"description":"Package management using MacPorts on OS X.\n\nSupports MacPorts versions and revisions, but not variants.\nVariant preferences may be specified using\n[the MacPorts variants.conf file](http://guide.macports.org/chunked/internals.configuration-files.html#internals.configuration-files.variants-conf).\n\nWhen specifying a version in the Puppet DSL, only specify the version, not the revision.\nRevisions are only used internally for ensuring the latest version/revision of a port.\n\n* Required binaries: `/opt/local/bin/port`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","uninstallable","upgradeable","versionable"]},"portupgrade":{"description":"Support for FreeBSD's ports using the portupgrade ports management software.\nUse the port's full origin as the resource name. eg (ports-mgmt/portupgrade)\nfor the portupgrade port.\n\n* Required binaries: `/usr/local/sbin/pkg_deinstall`, `/usr/local/sbin/portinstall`, `/usr/local/sbin/portupgrade`, `/usr/local/sbin/portversion`, `/usr/sbin/pkg_info`.\n* Supported features: `installable`, `uninstallable`, `upgradeable`.","features":["installable","uninstallable","upgradeable"]},"appdmg":{"description":"Package management which copies application bundles to a target.\n\n* Required binaries: `/usr/bin/curl`, `/usr/bin/ditto`, `/usr/bin/hdiutil`.\n* Supported features: `installable`.","features":["installable"]},"freebsd":{"description":"The specific form of package management on FreeBSD.  This is an\nextremely quirky packaging system, in that it freely mixes between\nports and packages.  Apparently all of the tools are written in Ruby,\nso there are plans to rewrite this support to directly use those\nlibraries.\n\n* Required binaries: `/usr/sbin/pkg_add`, `/usr/sbin/pkg_delete`, `/usr/sbin/pkg_info`.\n* Supported features: `installable`, `purgeable`, `uninstallable`.","features":["installable","purgeable","uninstallable"]},"windows":{"description":"Windows package management.\n\nThis provider supports either MSI or self-extracting executable installers.\n\nThis provider requires a `source` attribute when installing the package.\nIt accepts paths paths to local files, mapped drives, or UNC paths.\n\nIf the executable requires special arguments to perform a silent install or\nuninstall, then the appropriate arguments should be specified using the\n`install_options` or `uninstall_options` attributes, respectively.  Puppet\nwill automatically quote any option that contains spaces.\n\n* Default for `operatingsystem` == `windows`.\n* Supported features: `install_options`, `installable`, `uninstall_options`, `uninstallable`, `versionable`.","features":["install_options","installable","uninstall_options","uninstallable","versionable"]},"yum":{"description":"Support via `yum`.\n\nUsing this provider's `uninstallable` feature will not remove dependent packages. To\nremove dependent packages with this provider use the `purgeable` feature, but note this\nfeature is destructive and should be used with the utmost care.\n\n* Required binaries: `python`, `rpm`, `yum`.\n* Default for `operatingsystem` == `fedora, centos, redhat`.\n* Supported features: `installable`, `purgeable`, `uninstallable`, `upgradeable`, `versionable`.","features":["installable","purgeable","uninstallable","upgradeable","versionable"]}},"description":"Manage packages.  There is a basic dichotomy in package\nsupport right now:  Some package types (e.g., yum and apt) can\nretrieve their own package files, while others (e.g., rpm and sun)\ncannot.  For those package formats that cannot retrieve their own files,\nyou can use the `source` parameter to point to the correct file.\n\nPuppet will automatically guess the packaging format that you are\nusing based on the platform you are on, but you can override it\nusing the `provider` parameter; each provider defines what it\nrequires in order to function, and you must meet those requirements\nto use a given provider.\n\n**Autorequires:** If Puppet is managing the files specified as a\npackage's `adminfile`, `responsefile`, or `source`, the package\nresource will autorequire those files.","features":{"versionable":"The provider is capable of interrogating the\npackage database for installed version(s), and can select\nwhich out of a set of available versions of a package to\ninstall if asked.","holdable":"The provider is capable of placing packages on hold\nsuch that they are not automatically upgraded as a result of\nother package dependencies unless explicit action is taken by\na user or another package. Held is considered a superset of\ninstalled.","installable":"The provider can install packages.","uninstallable":"The provider can uninstall packages.","install_options":"The provider accepts options to be\npassed to the installer command.","upgradeable":"The provider can upgrade to the latest version of a\npackage.  This feature is used by specifying `latest` as the\ndesired value for the package.","uninstall_options":"The provider accepts options to be\npassed to the uninstaller command.","purgeable":"The provider can purge packages.  This generally means\nthat all traces of the package are removed, including\nexisting configuration files.  This feature is thus destructive\nand should be used with the utmost care."},"attributes":{"status":{"namevar":false,"description":"A read-only parameter set by the package.","kind":"parameter"},"flavor":{"namevar":false,"description":"OpenBSD supports 'flavors', which are further specifications for\nwhich type of package you want.","kind":"parameter"},"configfiles":{"namevar":false,"description":"Whether configfiles should be kept or replaced.  Most packages\ntypes do not support this parameter. Defaults to `keep`.\n\nValid values are `keep`, `replace`.","kind":"parameter"},"root":{"namevar":false,"description":"A read-only parameter set by the package.","kind":"parameter"},"source":{"namevar":false,"description":"Where to find the actual package.  This must be a local file\n(or on a network file system) or a URL that your specific\npackaging type understands; Puppet will not retrieve files for you,\nalthough you can manage packages as `file` resources.","kind":"parameter"},"instance":{"namevar":false,"description":"A read-only parameter set by the package.","kind":"parameter"},"category":{"namevar":false,"description":"A read-only parameter set by the package.","kind":"parameter"},"install_options":{"namevar":false,"description":"An array of additional options to pass when installing a package. These\noptions are package-specific, and should be documented by the software\nvendor.  One commonly implemented option is `INSTALLDIR`:\n\n    package { 'mysql':\n      ensure          => installed,\n      source          => 'N:/packages/mysql-5.5.16-winx64.msi',\n      install_options => [ '/S', { 'INSTALLDIR' => 'C:\\mysql-5.5' } ],\n    }\n\nEach option in the array can either be a string or a hash, where each\nkey and value pair are interpreted in a provider specific way.  Each\noption will automatically be quoted when passed to the install command.\n\nOn Windows, this is the **only** place in Puppet where backslash\nseparators should be used.  Note that backslashes in double-quoted\nstrings _must_ be double-escaped and backslashes in single-quoted\nstrings _may_ be double-escaped.\n\n\n\nRequires features install_options.","kind":"parameter"},"ensure":{"namevar":false,"description":"What state the package should be in. On packaging systems that can\nretrieve new packages on their own, you can choose which package to\nretrieve by specifying a version number or `latest` as the ensure\nvalue. On packaging systems that manage configuration files separately\nfrom \"normal\" system files, you can uninstall config files by\nspecifying `purged` as the ensure value. This defaults to `installed`.\n\nValid values are `present` (also called `installed`), `absent`, `purged`, `held`, `latest`. Values can match `/./`.","kind":"property"},"vendor":{"namevar":false,"description":"A read-only parameter set by the package.","kind":"parameter"},"name":{"namevar":true,"description":"The package name.  This is the name that the packaging\nsystem uses internally, which is sometimes (especially on Solaris)\na name that is basically useless to humans.  If you want to\nabstract package installation, then you can use aliases to provide\na common name to packages:\n\n    # In the 'openssl' class\n    $ssl = $operatingsystem ? {\n      solaris => SMCossl,\n      default => openssl\n    }\n\n    # It is not an error to set an alias to the same value as the\n    # object name.\n    package { $ssl:\n      ensure => installed,\n      alias  => openssl\n    }\n\n    . etc. .\n\n    $ssh = $operatingsystem ? {\n      solaris => SMCossh,\n      default => openssh\n    }\n\n    # Use the alias to specify a dependency, rather than\n    # having another selector to figure it out again.\n    package { $ssh:\n      ensure  => installed,\n      alias   => openssh,\n      require => Package[openssl]\n    }","kind":"parameter"},"adminfile":{"namevar":false,"description":"A file containing package defaults for installing packages.\nThis is currently only used on Solaris.  The value will be\nvalidated according to system rules, which in the case of\nSolaris means that it should either be a fully qualified path\nor it should be in `/var/sadm/install/admin`.","kind":"parameter"},"description":{"namevar":false,"description":"A read-only parameter set by the package.","kind":"parameter"},"uninstall_options":{"namevar":false,"description":"An array of additional options to pass when uninstalling a package. These\noptions are package-specific, and should be documented by the software\nvendor.  For example:\n\n    package { 'VMware Tools':\n      ensure            => absent,\n      uninstall_options => [ { 'REMOVE' => 'Sync,VSS' } ],\n    }\n\nEach option in the array can either be a string or a hash, where each\nkey and value pair are interpreted in a provider specific way.  Each\noption will automatically be quoted when passed to the uninstall\ncommand.\n\nOn Windows, this is the **only** place in Puppet where backslash\nseparators should be used.  Note that backslashes in double-quoted\nstrings _must_ be double-escaped and backslashes in single-quoted\nstrings _may_ be double-escaped.\n\n\n\nRequires features uninstall_options.","kind":"parameter"},"platform":{"namevar":false,"description":"A read-only parameter set by the package.","kind":"parameter"},"allowcdrom":{"namevar":false,"description":"Tells apt to allow cdrom sources in the sources.list file.\nNormally apt will bail if you try this.\n\nValid values are `true`, `false`.","kind":"parameter"},"responsefile":{"namevar":false,"description":"A file containing any necessary answers to questions asked by\nthe package.  This is currently used on Solaris and Debian.  The\nvalue will be validated according to system rules, but it should\ngenerally be a fully qualified path.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `package`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"nagios_hostextinfo":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type hostextinfo.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_hostextinfo.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"icon_image":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"icon_image_alt":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"vrml_image":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The target.","kind":"property"},"statusmap_image":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_name":{"namevar":true,"description":"The name of this nagios_hostextinfo resource.","kind":"parameter"},"notes_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_hostextinfo`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"nagios_serviceescalation":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type serviceescalation.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_serviceescalation.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"contacts":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contact_groups":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"first_notification":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"servicegroup_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"last_notification":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"hostgroup_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"_naginator_name":{"namevar":true,"description":"The name of this nagios_serviceescalation resource.","kind":"parameter"},"target":{"namevar":false,"description":"The target.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"escalation_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_serviceescalation`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"escalation_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"service_description":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"schedule":{"providers":{},"description":"Define schedules for Puppet. Resources can be limited to a schedule by using the\n[`schedule`](http://docs.puppetlabs.com/references/latest/metaparameter.html#schedule)\nmetaparameter.\n\nCurrently, **schedules can only be used to stop a resource from being\napplied;** they cannot cause a resource to be applied when it otherwise\nwouldn't be, and they cannot accurately specify a time when a resource\nshould run.\n\nEvery time Puppet applies its configuration, it will apply the\nset of resources whose schedule does not eliminate them from\nrunning right then, but there is currently no system in place to\nguarantee that a given resource runs at a given time.  If you\nspecify a very  restrictive schedule and Puppet happens to run at a\ntime within that schedule, then the resources will get applied;\notherwise, that work may never get done.\n\nThus, it is advisable to use wider scheduling (e.g., over a couple of\nhours) combined with periods and repetitions.  For instance, if you\nwanted to restrict certain resources to only running once, between\nthe hours of two and 4 AM, then you would use this schedule:\n\n    schedule { 'maint':\n      range  => \"2 - 4\",\n      period => daily,\n      repeat => 1,\n    }\n\nWith this schedule, the first time that Puppet runs between 2 and 4 AM,\nall resources with this schedule will get applied, but they won't\nget applied again between 2 and 4 because they will have already\nrun once that day, and they won't get applied outside that schedule\nbecause they will be outside the scheduled range.\n\nPuppet automatically creates a schedule for each of the valid periods\nwith the same name as that period (e.g., hourly and daily).\nAdditionally, a schedule named `puppet` is created and used as the\ndefault, with the following attributes:\n\n    schedule { 'puppet':\n      period => hourly,\n      repeat => 2,\n    }\n\nThis will cause resources to be applied every 30 minutes by default.","features":{},"attributes":{"periodmatch":{"namevar":false,"description":"Whether periods should be matched by number (e.g., the two times\nare in the same hour) or by distance (e.g., the two times are\n60 minutes apart).\n\nValid values are `number`, `distance`.","kind":"parameter"},"range":{"namevar":false,"description":"The earliest and latest that a resource can be applied.  This is\nalways a hyphen-separated range within a 24 hour period, and hours\nmust be specified in numbers between 0 and 23, inclusive.  Minutes and\nseconds can optionally be provided, using the normal colon as a\nseparator. For instance:\n\n    schedule { 'maintenance':\n      range => \"1:30 - 4:30\",\n    }\n\nThis is mostly useful for restricting certain resources to being\napplied in maintenance windows or during off-peak hours. Multiple\nranges can be applied in array context. As a convenience when specifying\nranges, you may cross midnight (e.g.: range => \"22:00 - 04:00\").","kind":"parameter"},"period":{"namevar":false,"description":"The period of repetition for a resource. The default is for a resource\nto get applied every time Puppet runs.\n\nNote that the period defines how often a given resource will get\napplied but not when; if you would like to restrict the hours\nthat a given resource can be applied (e.g., only at night during\na maintenance window), then use the `range` attribute.\n\nIf the provided periods are not sufficient, you can provide a\nvalue to the *repeat* attribute, which will cause Puppet to\nschedule the affected resources evenly in the period the\nspecified number of times.  Take this schedule:\n\n    schedule { 'veryoften':\n      period => hourly,\n      repeat => 6,\n    }\n\nThis can cause Puppet to apply that resource up to every 10 minutes.\n\nAt the moment, Puppet cannot guarantee that level of\nrepetition; that is, it can run up to every 10 minutes, but\ninternal factors might prevent it from actually running that\noften (e.g., long-running Puppet runs will squash conflictingly scheduled runs).\n\nSee the `periodmatch` attribute for tuning whether to match\ntimes by their distance apart or by their specific value.\n\nValid values are `hourly`, `daily`, `weekly`, `monthly`, `never`.","kind":"parameter"},"repeat":{"namevar":false,"description":"How often a given resource may be applied in this schedule's `period`.\nDefaults to 1; must be an integer.","kind":"parameter"},"name":{"namevar":true,"description":"The name of the schedule.  This name is used to retrieve the\nschedule when assigning it to an object:\n\n    schedule { 'daily':\n      period => daily,\n      range  => \"2 - 4\",\n    }\n\n    exec { \"/usr/bin/apt-get update\":\n      schedule => 'daily',\n    }","kind":"parameter"},"weekday":{"namevar":false,"description":"The days of the week in which the schedule should be valid.\nYou may specify the full day name (Tuesday), the three character\nabbreviation (Tue), or a number corresponding to the day of the\nweek where 0 is Sunday, 1 is Monday, etc. You may pass an array\nto specify multiple days. If not specified, the day of the week\nwill not be considered in the schedule.\n\nIf you are also using a range match that spans across midnight\nthen this parameter will match the day that it was at the start\nof the range, not necessarily the day that it is when it matches.\nFor example, consider this schedule:\n\n    schedule { 'maintenance_window':\n      range   => '22:00 - 04:00',\n      weekday => 'Saturday',\n    }\n\nThis will match at 11 PM on Saturday and 2 AM on Sunday, but not\nat 2 AM on Saturday.","kind":"parameter"}}},"stage":{"providers":{},"description":"A resource type for specifying run stages.  The actual stage should\nbe specified on resources:\n\n    class { foo: stage => pre }\n\nAnd you must manually control stage order:\n\n    stage { pre: before => Stage[main] }\n\nYou automatically get a 'main' stage created, and by default all resources\nget inserted into that stage.\n\nYou can only set stages on class resources, not normal builtin resources.","features":{},"attributes":{"name":{"namevar":true,"description":"The name of the stage. This will be used as the 'stage' for each resource.","kind":"parameter"}}},"tidy":{"providers":{},"description":"Remove unwanted files based on specific criteria.  Multiple\ncriteria are OR'd together, so a file that is too large but is not\nold enough will still get tidied.\n\nIf you don't specify either `age` or `size`, then all files will\nbe removed.\n\nThis resource type works by generating a file resource for every file\nthat should be deleted and then letting that resource perform the\nactual deletion.","features":{},"attributes":{"matches":{"namevar":false,"description":"One or more (shell type) file glob patterns, which restrict\nthe list of files to be tidied to those whose basenames match\nat least one of the patterns specified. Multiple patterns can\nbe specified using an array.\n\nExample:\n\n    tidy { \"/tmp\":\n      age     => \"1w\",\n      recurse => 1,\n      matches => [ \"[0-9]pub*.tmp\", \"*.temp\", \"tmpfile?\" ]\n    }\n\nThis removes files from `/tmp` if they are one week old or older,\nare not in a subdirectory and match one of the shell globs given.\n\nNote that the patterns are matched against the basename of each\nfile -- that is, your glob patterns should not have any '/'\ncharacters in them, since you are only specifying against the last\nbit of the file.\n\nFinally, note that you must now specify a non-zero/non-false value\nfor recurse if matches is used, as matches only apply to files found\nby recursion (there's no reason to use static patterns match against\na statically determined path).  Requiering explicit recursion clears\nup a common source of confusion.","kind":"parameter"},"type":{"namevar":false,"description":"Set the mechanism for determining age. Default: atime.\n\nValid values are `atime`, `mtime`, `ctime`.","kind":"parameter"},"rmdirs":{"namevar":false,"description":"Tidy directories in addition to files; that is, remove\ndirectories whose age is older than the specified criteria.\nThis will only remove empty directories, so all contained\nfiles must also be tidied before a directory gets removed.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"path":{"namevar":true,"description":"The path to the file or directory to manage.  Must be fully\nqualified.","kind":"parameter"},"recurse":{"namevar":false,"description":"If target is a directory, recursively descend\ninto the directory looking for files to tidy.\n\nValid values are `true`, `false`, `inf`. Values can match `/^[0-9]+$/`.","kind":"parameter"},"backup":{"namevar":false,"description":"Whether tidied files should be backed up.  Any values are passed\ndirectly to the file resources used for actual file deletion, so consult\nthe `file` type's backup documentation to determine valid values.","kind":"parameter"},"age":{"namevar":false,"description":"Tidy files whose age is equal to or greater than\nthe specified time.  You can choose seconds, minutes,\nhours, days, or weeks by specifying the first letter of any\nof those words (e.g., '1w').\n\nSpecifying 0 will remove all files.","kind":"parameter"},"size":{"namevar":false,"description":"Tidy files whose size is equal to or greater than\nthe specified size.  Unqualified values are in kilobytes, but\n*b*, *k*, *m*, *g*, and *t* can be appended to specify *bytes*,\n*kilobytes*, *megabytes*, *gigabytes*, and *terabytes*, respectively.\nOnly the first character is significant, so the full word can also\nbe used.","kind":"parameter"}}},"file":{"providers":{"posix":{"description":"Uses POSIX functionality to manage file ownership and permissions.\n\n* Supported features: `manages_symlinks`.","features":["manages_symlinks"]},"windows":{"description":"Uses Microsoft Windows functionality to manage file ownership and permissions.\n\n* Supported features: `manages_symlinks`.","features":["manages_symlinks"]}},"description":"Manages files, including their content, ownership, and permissions.\n\nThe `file` type can manage normal files, directories, and symlinks; the\ntype should be specified in the `ensure` attribute. Note that symlinks cannot\nbe managed on Windows systems.\n\nFile contents can be managed directly with the `content` attribute, or\ndownloaded from a remote source using the `source` attribute; the latter\ncan also be used to recursively serve directories (when the `recurse`\nattribute is set to `true` or `local`). On Windows, note that file\ncontents are managed in binary mode; Puppet never automatically translates\nline endings.\n\n**Autorequires:** If Puppet is managing the user or group that owns a\nfile, the file resource will autorequire them. If Puppet is managing any\nparent directories of a file, the file resource will autorequire them.","features":{"manages_symlinks":"The provider can manage symbolic links."},"attributes":{"recurselimit":{"namevar":false,"description":"How deeply to do recursive management.\n\nValues can match `/^[0-9]+$/`.","kind":"parameter"},"type":{"namevar":false,"description":"A read-only state to check the file type.","kind":"property"},"path":{"namevar":true,"description":"The path to the file to manage.  Must be fully qualified.\n\nOn Windows, the path should include the drive letter and should use `/` as\nthe separator character (rather than `\\\\`).","kind":"parameter"},"mtime":{"namevar":false,"description":"A read-only state to check the file mtime. On \\*nix-like systems, this\nis the time of the most recent change to the content of the file.","kind":"property"},"selrole":{"namevar":false,"description":"What the SELinux role component of the context of the file should be.\nAny valid SELinux role component is accepted.  For example `role_r`.\nIf not specified it defaults to the value returned by matchpathcon for\nthe file, if any exists.  Only valid on systems with SELinux support\nenabled.","kind":"property"},"mode":{"namevar":false,"description":"The desired permissions mode for the file, in symbolic or numeric\nnotation. Puppet uses traditional Unix permission schemes and translates\nthem to equivalent permissions for systems which represent permissions\ndifferently, including Windows.\n\nNumeric modes should use the standard four-digit octal notation of\n`<setuid/setgid/sticky><owner><group><other>` (e.g. 0644). Each of the\n\"owner,\" \"group,\" and \"other\" digits should be a sum of the\npermissions for that class of users, where read = 4, write = 2, and\nexecute/search = 1. When setting numeric permissions for\ndirectories, Puppet sets the search permission wherever the read\npermission is set.\n\nSymbolic modes should be represented as a string of comma-separated\npermission clauses, in the form `<who><op><perm>`:\n\n* \"Who\" should be u (user), g (group), o (other), and/or a (all)\n* \"Op\" should be = (set exact permissions), + (add select permissions),\n  or - (remove select permissions)\n* \"Perm\" should be one or more of:\n    * r (read)\n    * w (write)\n    * x (execute/search)\n    * t (sticky)\n    * s (setuid/setgid)\n    * X (execute/search if directory or if any one user can execute)\n    * u (user's current permissions)\n    * g (group's current permissions)\n    * o (other's current permissions)\n\nThus, mode `0664` could be represented symbolically as either `a=r,ug+w`\nor `ug=rw,o=r`.  However, symbolic modes are more expressive than numeric\nmodes: a mode only affects the specified bits, so `mode => 'ug+w'` will\nset the user and group write bits, without affecting any other bits.\n\nSee the manual page for GNU or BSD `chmod` for more details\non numeric and symbolic modes.\n\nOn Windows, permissions are translated as follows:\n\n* Owner and group names are mapped to Windows SIDs\n* The \"other\" class of users maps to the \"Everyone\" SID\n* The read/write/execute permissions map to the `FILE_GENERIC_READ`,\n  `FILE_GENERIC_WRITE`, and `FILE_GENERIC_EXECUTE` access rights; a\n  file's owner always has the `FULL_CONTROL` right\n* \"Other\" users can't have any permissions a file's group lacks,\n  and its group can't have any permissions its owner lacks; that is, 0644\n  is an acceptable mode, but 0464 is not.","kind":"property"},"replace":{"namevar":false,"description":"Whether to replace a file or symlink that already exists on the local system but\nwhose content doesn't match what the `source` or `content` attribute\nspecifies.  Setting this to false allows file resources to initialize files\nwithout overwriting future changes.  Note that this only affects content;\nPuppet will still manage ownership and permissions. Defaults to `true`.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"ignore":{"namevar":false,"description":"A parameter which omits action on files matching\nspecified patterns during recursion.  Uses Ruby's builtin globbing\nengine, so shell metacharacters are fully supported, e.g. `[a-z]*`.\nMatches that would descend into the directory structure are ignored,\ne.g., `*/*`.","kind":"parameter"},"show_diff":{"namevar":false,"description":"Whether to display differences when the file changes, defaulting to\ntrue.  This parameter is useful for files that may contain passwords or\nother secret data, which might otherwise be included in Puppet reports or\nother insecure outputs.  If the global ``show_diff` configuration parameter\nis false, then no diffs will be shown even if this parameter is true.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"owner":{"namevar":false,"description":"The user to whom the file should belong.  Argument can be a user name or a\nuser ID.\n\nOn Windows, a group (such as \"Administrators\") can be set as a file's owner\nand a user (such as \"Administrator\") can be set as a file's group; however,\na file's owner and group shouldn't be the same. (If the owner is also\nthe group, files with modes like `0640` will cause log churn, as they\nwill always appear out of sync.)","kind":"property"},"content":{"namevar":false,"description":"The desired contents of a file, as a string. This attribute is mutually\nexclusive with `source` and `target`.\n\nNewlines and tabs can be specified in double-quoted strings using\nstandard escaped syntax --- \\n for a newline, and \\t for a tab.\n\nWith very small files, you can construct content strings directly in\nthe manifest...\n\n    define resolve(nameserver1, nameserver2, domain, search) {\n        $str = \"search $search\n            domain $domain\n            nameserver $nameserver1\n            nameserver $nameserver2\n            \"\n\n        file { \"/etc/resolv.conf\":\n          content => \"$str\",\n        }\n    }\n\n...but for larger files, this attribute is more useful when combined with the\n[template](http://docs.puppetlabs.com/references/latest/function.html#template)\nfunction.","kind":"property"},"force":{"namevar":false,"description":"Perform the file operation even if it will destroy one or more directories.\nYou must use `force` in order to:\n\n* `purge` subdirectories\n* Replace directories with files or links\n* Remove a directory when `ensure => absent`\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"links":{"namevar":false,"description":"How to handle links during file actions.  During file copying,\n`follow` will copy the target file instead of the link, `manage`\nwill copy the link itself, and `ignore` will just pass it by.\nWhen not copying, `manage` and `ignore` behave equivalently\n(because you cannot really ignore links entirely during local\nrecursion), and `follow` will manage the file to which the link points.\n\nValid values are `follow`, `manage`.","kind":"parameter"},"ctime":{"namevar":false,"description":"A read-only state to check the file ctime. On most modern \\*nix-like\nsystems, this is the time of the most recent change to the owner, group,\npermissions, or content of the file.","kind":"property"},"seltype":{"namevar":false,"description":"What the SELinux type component of the context of the file should be.\nAny valid SELinux type component is accepted.  For example `tmp_t`.\nIf not specified it defaults to the value returned by matchpathcon for\nthe file, if any exists.  Only valid on systems with SELinux support\nenabled.","kind":"property"},"group":{"namevar":false,"description":"Which group should own the file.  Argument can be either a group\nname or a group ID.\n\nOn Windows, a user (such as \"Administrator\") can be set as a file's group\nand a group (such as \"Administrators\") can be set as a file's owner;\nhowever, a file's owner and group shouldn't be the same. (If the owner\nis also the group, files with modes like `0640` will cause log churn, as\nthey will always appear out of sync.)","kind":"property"},"source":{"namevar":false,"description":"A source file, which will be copied into place on the local system.\nValues can be URIs pointing to remote files, or fully qualified paths to\nfiles available on the local system (including files on NFS shares or\nWindows mapped drives). This attribute is mutually exclusive with\n`content` and `target`.\n\nThe available URI schemes are *puppet* and *file*. *Puppet*\nURIs will retrieve files from Puppet's built-in file server, and are\nusually formatted as:\n\n`puppet:///modules/name_of_module/filename`\n\nThis will fetch a file from a module on the puppet master (or from a\nlocal module when using puppet apply). Given a `modulepath` of\n`/etc/puppetlabs/puppet/modules`, the example above would resolve to\n`/etc/puppetlabs/puppet/modules/name_of_module/files/filename`.\n\nUnlike `content`, the `source` attribute can be used to recursively copy\ndirectories if the `recurse` attribute is set to `true` or `remote`. If\na source directory contains symlinks, use the `links` attribute to\nspecify whether to recreate links or follow them.\n\nMultiple `source` values can be specified as an array, and Puppet will\nuse the first source that exists. This can be used to serve different\nfiles to different system types:\n\n    file { \"/etc/nfs.conf\":\n      source => [\n        \"puppet:///modules/nfs/conf.$host\",\n        \"puppet:///modules/nfs/conf.$operatingsystem\",\n        \"puppet:///modules/nfs/conf\"\n      ]\n    }\n\nAlternately, when serving directories recursively, multiple sources can\nbe combined by setting the `sourceselect` attribute to `all`.","kind":"parameter"},"selrange":{"namevar":false,"description":"What the SELinux range component of the context of the file should be.\nAny valid SELinux range component is accepted.  For example `s0` or\n`SystemHigh`.  If not specified it defaults to the value returned by\nmatchpathcon for the file, if any exists.  Only valid on systems with\nSELinux support enabled and that have support for MCS (Multi-Category\nSecurity).","kind":"property"},"purge":{"namevar":false,"description":"Whether unmanaged files should be purged. This option only makes\nsense when managing directories with `recurse => true`.\n\n* When recursively duplicating an entire directory with the `source`\n  attribute, `purge => true` will automatically purge any files\n  that are not in the source directory.\n* When managing files in a directory as individual resources,\n  setting `purge => true` will purge any files that aren't being\n  specifically managed.\n\nIf you have a filebucket configured, the purged files will be uploaded,\nbut if you do not, this will destroy data.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"ensure":{"namevar":false,"description":"Whether the file should exist, and if so what kind of file it should be.\nPossible values are `present`, `absent`, `file`, `directory`, and `link`.\n\n* `present` will accept any form of file existence, and will create a\n  normal file if the file is missing. (The file will have no content\n  unless the `content` or `source` attribute is used.)\n* `absent` will make sure the file doesn't exist, deleting it\n  if necessary.\n* `file` will make sure it's a normal file, and enables use of the\n  `content` or `source` attribute.\n* `directory` will make sure it's a directory, and enables use of the\n  `source`, `recurse`, `recurselimit`, `ignore`, and `purge` attributes.\n* `link` will make sure the file is a symlink, and **requires** that you\n  also set the `target` attribute. Symlinks are supported on all Posix\n  systems and on Windows Vista / 2008 and higher. On Windows, managing\n  symlinks requires puppet agent's user account to have the \"Create\n  Symbolic Links\" privilege; this can be configured in the \"User Rights\n  Assignment\" section in the Windows policy editor. By default, puppet\n  agent runs as the Administrator account, which does have this privilege.\n\nPuppet avoids destroying directories unless the `force` attribute is set\nto `true`. This means that if a file is currently a directory, setting\n`ensure` to anything but `directory` or `present` will cause Puppet to\nskip managing the resource and log either a notice or an error.\n\nThere is one other non-standard value for `ensure`. If you specify the\npath to another file as the ensure value, it is equivalent to specifying\n`link` and using that path as the `target`:\n\n    # Equivalent resources:\n\n    file { \"/etc/inetd.conf\":\n      ensure => \"/etc/inet/inetd.conf\",\n    }\n\n    file { \"/etc/inetd.conf\":\n      ensure => link,\n      target => \"/etc/inet/inetd.conf\",\n    }\n\nHowever, we recommend using `link` and `target` explicitly, since this\nbehavior can be harder to read.\n\nValid values are `absent` (also called `false`), `file`, `present`, `directory`, `link`. Values can match `/./`.","kind":"property"},"backup":{"namevar":false,"description":"Whether (and how) file content should be backed up before being replaced.\nThis attribute works best as a resource default in the site manifest\n(`File { backup => main }`), so it can affect all file resources.\n\n* If set to `false`, file content won't be backed up.\n* If set to a string beginning with `.` (e.g., `.puppet-bak`), Puppet will\n  use copy the file in the same directory with that value as the extension\n  of the backup. (A value of `true` is a synonym for `.puppet-bak`.)\n* If set to any other string, Puppet will try to back up to a filebucket\n  with that title. See the `filebucket` resource type for more details.\n  (This is the preferred method for backup, since it can be centralized\n  and queried.)\n\nDefault value: `puppet`, which backs up to a filebucket of the same name.\n(Puppet automatically creates a **local** filebucket named `puppet` if one\ndoesn't already exist.)\n\nBacking up to a local filebucket isn't particularly useful. If you want\nto make organized use of backups, you will generally want to use the\npuppet master server's filebucket service. This requires declaring a\nfilebucket resource and a resource default for the `backup` attribute\nin site.pp:\n\n    # /etc/puppet/manifests/site.pp\n    filebucket { 'main':\n      path   => false,                # This is required for remote filebuckets.\n      server => 'puppet.example.com', # Optional; defaults to the configured puppet master.\n    }\n\n    File { backup => main, }\n\nIf you are using multiple puppet master servers, you will want to\ncentralize the contents of the filebucket. Either configure your load\nbalancer to direct all filebucket traffic to a single master, or use\nsomething like an out-of-band rsync task to synchronize the content on all\nmasters.","kind":"parameter"},"recurse":{"namevar":false,"description":"Whether and how to do recursive file management. Options are:\n\n* `inf,true` --- Regular style recursion on both remote and local\n  directory structure.  See `recurselimit` to specify a limit to the\n  recursion depth.\n* `remote` --- Descends recursively into the remote (source) directory\n  but not the local (destination) directory. Allows copying of\n  a few files into a directory containing many\n  unmanaged files without scanning all the local files.\n  This can only be used when a source parameter is specified.\n* `false` --- Default of no recursion.\n\nValid values are `true`, `false`, `inf`, `remote`.","kind":"parameter"},"target":{"namevar":false,"description":"The target for creating a link.  Currently, symlinks are the\nonly type supported. This attribute is mutually exclusive with `source`\nand `content`.\n\nSymlink targets can be relative, as well as absolute:\n\n    # (Useful on Solaris)\n    file { \"/etc/inetd.conf\":\n      ensure => link,\n      target => \"inet/inetd.conf\",\n    }\n\nDirectories of symlinks can be served recursively by instead using the\n`source` attribute, setting `ensure` to `directory`, and setting the\n`links` attribute to `manage`.\n\nValid values are `notlink`. Values can match `/./`.","kind":"property"},"sourceselect":{"namevar":false,"description":"Whether to copy all valid sources, or just the first one.  This parameter\nonly affects recursive directory copies; by default, the first valid\nsource is the only one used, but if this parameter is set to `all`, then\nall valid sources will have all of their contents copied to the local\nsystem. If a given file exists in more than one source, the version from\nthe earliest source in the list will be used.\n\nValid values are `first`, `all`.","kind":"parameter"},"source_permissions":{"namevar":false,"description":"Whether (and how) Puppet should copy owner, group, and mode permissions from\nthe `source` to `file` resources when the permissions are not explicitly\nspecified. (In all cases, explicit permissions will take precedence.)\nValid values are `use`, `use_when_creating`, and `ignore`:\n\n* `use` (the default) will cause Puppet to apply the owner, group,\n  and mode from the `source` to any files it is managing.\n* `use_when_creating` will only apply the owner, group, and mode from the\n  `source` when creating a file; existing files will not have their permissions\n  overwritten.\n* `ignore` will never apply the owner, group, or mode from the `source` when\n  managing a file. When creating new files without explicit permissions,\n  the permissions they receive will depend on platform-specific behavior.\n  On POSIX, Puppet will use the umask of the user it is running as. On\n  Windows, Puppet will use the default DACL associated with the user it is\n  running as.\n\nValid values are `use`, `use_when_creating`, `ignore`.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `file`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"checksum":{"namevar":false,"description":"The checksum type to use when determining whether to replace a file's contents.\n\nThe default checksum type is md5.\n\nValid values are `md5`, `md5lite`, `mtime`, `ctime`, `none`.","kind":"parameter"},"selinux_ignore_defaults":{"namevar":false,"description":"If this is set then Puppet will not ask SELinux (via matchpathcon) to\nsupply defaults for the SELinux attributes (seluser, selrole,\nseltype, and selrange). In general, you should leave this set at its\ndefault and only set it to true when you need Puppet to not try to fix\nSELinux labels automatically.\n\nValid values are `true`, `false`.","kind":"parameter"},"seluser":{"namevar":false,"description":"What the SELinux user component of the context of the file should be.\nAny valid SELinux user component is accepted.  For example `user_u`.\nIf not specified it defaults to the value returned by matchpathcon for\nthe file, if any exists.  Only valid on systems with SELinux support\nenabled.","kind":"property"}}},"group":{"providers":{"ldap":{"description":"Group management via LDAP.\n\nThis provider requires that you have valid values for all of the\nLDAP-related settings in `puppet.conf`, including `ldapbase`.  You will\nalmost definitely need settings for `ldapuser` and `ldappassword` in order\nfor your clients to write to LDAP.\n\nNote that this provider will automatically generate a GID for you if you do\nnot specify one, but it is a potentially expensive operation, as it\niterates across all existing groups to pick the appropriate next one.","features":[]},"pw":{"description":"Group management via `pw` on FreeBSD and DragonFly BSD.\n\n* Required binaries: `pw`.\n* Default for `operatingsystem` == `freebsd, dragonfly`.\n* Supported features: `manages_members`.","features":["manages_members"]},"aix":{"description":"Group management for AIX.\n\n* Required binaries: `/usr/bin/chgroup`, `/usr/bin/mkgroup`, `/usr/sbin/lsgroup`, `/usr/sbin/rmgroup`.\n* Default for `operatingsystem` == `aix`.\n* Supported features: `manages_aix_lam`, `manages_members`.","features":["manages_aix_lam","manages_members"]},"windows_adsi":{"description":"Local group management for Windows. Group members can be both users and groups.\nAdditionally, local groups can contain domain users.\n\n* Default for `operatingsystem` == `windows`.\n* Supported features: `manages_members`.","features":["manages_members"]},"directoryservice":{"description":"Group management using DirectoryService on OS X.\n\n* Required binaries: `/usr/bin/dscl`.\n* Default for `operatingsystem` == `darwin`.\n* Supported features: `manages_members`.","features":["manages_members"]},"groupadd":{"description":"Group management via `groupadd` and its ilk. The default for most platforms.\n\n* Required binaries: `groupadd`, `groupdel`, `groupmod`, `lgroupadd`.\n* Supported features: `system_groups`.","features":["system_groups","libuser"]}},"description":"Manage groups. On most platforms this can only create groups.\nGroup membership must be managed on individual users.\n\nOn some platforms such as OS X, group membership is managed as an\nattribute of the group, not the user record. Providers must have\nthe feature 'manages_members' to manage the 'members' property of\na group record.","features":{"manages_members":"For directories where membership is an attribute of groups not users.","manages_aix_lam":"The provider can manage AIX Loadable Authentication Module (LAM) system.","libuser":"Allows local groups to be managed on systems that also use some other\nremote NSS method of managing accounts.","system_groups":"The provider allows you to create system groups with lower GIDs."},"attributes":{"attribute_membership":{"namevar":false,"description":"Whether specified attribute value pairs should be treated as the only attributes\nof the user or whether they should merely\nbe treated as the minimum list.\n\nValid values are `inclusive`, `minimum`.","kind":"parameter"},"system":{"namevar":false,"description":"Whether the group is a system group with lower GID.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"allowdupe":{"namevar":false,"description":"Whether to allow duplicate GIDs. Defaults to `false`.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"ia_load_module":{"namevar":false,"description":"The name of the I&A module to use to manage this user\n\n\n\nRequires features manages_aix_lam.","kind":"parameter"},"members":{"namevar":false,"description":"The members of the group. For directory services where group\nmembership is stored in the group objects, not the users.\n\n\n\nRequires features manages_members.","kind":"property"},"ensure":{"namevar":false,"description":"Create or remove the group.\n\nValid values are `present`, `absent`.","kind":"property"},"forcelocal":{"namevar":false,"description":"Forces the mangement of local accounts when accounts are also\nbeing managed by some other NSS\n\nValid values are `true`, `false`, `yes`, `no`.\n\nRequires features libuser.","kind":"parameter"},"gid":{"namevar":false,"description":"The group ID.  Must be specified numerically.  If no group ID is\nspecified when creating a new group, then one will be chosen\nautomatically according to local system standards. This will likely\nresult in the same group having different GIDs on different systems,\nwhich is not recommended.\n\nOn Windows, this property is read-only and will return the group's security\nidentifier (SID).","kind":"property"},"auth_membership":{"namevar":false,"description":"whether the provider is authoritative for group membership.","kind":"parameter"},"name":{"namevar":true,"description":"The group name. While naming limitations vary by operating system,\nit is advisable to restrict names to the lowest common denominator,\nwhich is a maximum of 8 characters beginning with a letter.\n\nNote that Puppet considers group names to be case-sensitive, regardless\nof the platform's own rules; be sure to always use the same case when\nreferring to a given group.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `group`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"attributes":{"namevar":false,"description":"Specify group AIX attributes in an array of `key=value` pairs.\n\n\n\nRequires features manages_aix_lam.","kind":"property"}}},"mailalias":{"providers":{"aliases":{"description":"","features":[]}},"description":"Creates an email alias in the local alias database.","features":{},"attributes":{"recipient":{"namevar":false,"description":"Where email should be sent.  Multiple values\nshould be specified as an array.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The file in which to store the aliases.  Only used by\nthose providers that write to disk.","kind":"property"},"name":{"namevar":true,"description":"The alias name.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `mailalias`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"nagios_command":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type command.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_command.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"poller_tag":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"command_line":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"command_name":{"namevar":true,"description":"The name of this nagios_command resource.","kind":"parameter"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The target.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_command`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"router":{"providers":{},"description":"Manages connected router.","features":{},"attributes":{"url":{"namevar":true,"description":"An SSH or telnet URL at which to access the router, in the form\n`ssh://user:pass:enable@host/` or `telnet://user:pass:enable@host/`.","kind":"parameter"}}},"scheduled_task":{"providers":{"win32_taskscheduler":{"description":"This provider uses the win32-taskscheduler gem to manage scheduled\ntasks on Windows.\n\nPuppet requires version 0.2.1 or later of the win32-taskscheduler gem;\nprevious versions can cause \"Could not evaluate: The operation completed\nsuccessfully\" errors.\n\n* Default for `operatingsystem` == `windows`.","features":[]}},"description":"Installs and manages Windows Scheduled Tasks.  All attributes\nexcept `name`, `command`, and `trigger` are optional; see the description\nof the `trigger` attribute for details on setting schedules.","features":{},"attributes":{"password":{"namevar":false,"description":"The password for the user specified in the 'user' attribute.\nThis is only used if specifying a user other than 'SYSTEM'.\nSince there is no way to retrieve the password used to set the\naccount information for a task, this parameter will not be used\nto determine if a scheduled task is in sync or not.","kind":"parameter"},"working_dir":{"namevar":false,"description":"The full path of the directory in which to start the command.","kind":"property"},"trigger":{"namevar":false,"description":"One or more triggers defining when the task should run. A single trigger is\nrepresented as a hash, and multiple triggers can be specified with an array of\nhashes.\n\nA trigger can contain the following keys:\n\n* For all triggers:\n    * `schedule` **(Required)** --- The schedule type. Valid values are\n      `daily`, `weekly`, `monthly`, or `once`.\n    * `start_time` **(Required)** --- The time of day when the trigger should\n      first become active. Several time formats will work, but we\n      suggest 24-hour time formatted as HH:MM.\n    * `start_date` ---  The date when the trigger should first become active.\n      Defaults to the current date. You should format dates as YYYY-MM-DD,\n      although other date formats may work. (Under the hood, this uses `Date.parse`.)\n* For daily triggers:\n    * `every` --- How often the task should run, as a number of days. Defaults\n      to 1. (\"2\" means every other day, \"3\" means every three days, etc.)\n* For weekly triggers:\n    * `every` --- How often the task should run, as a number of weeks. Defaults\n      to 1. (\"2\" means every other week, \"3\" means every three weeks, etc.)\n    * `day_of_week` --- Which days of the week the task should run, as an array.\n      Defaults to all days. Each day must be one of `mon`, `tues`,\n      `wed`, `thurs`, `fri`, `sat`, `sun`, or `all`.\n* For monthly-by-date triggers:\n    * `months` --- Which months the task should run, as an array. Defaults to\n      all months. Each month must be an integer between 1 and 12.\n    * `on` **(Required)** --- Which days of the month the task should run,\n      as an array. Each day must beeither an integer between 1 and 31,\n      or the special value `last,` which is always the last day of the month.\n* For monthly-by-weekday triggers:\n    * `months` --- Which months the task should run, as an array. Defaults to\n      all months. Each month must be an integer between 1 and 12.\n    * `day_of_week` **(Required)** --- Which day of the week the task should\n      run, as an array with only one element. Each day must be one of `mon`,\n      `tues`, `wed`, `thurs`, `fri`, `sat`, `sun`, or `all`.\n    * `which_occurrence` **(Required)** --- The occurrence of the chosen weekday\n      when the task should run. Must be one of `first`, `second`, `third`,\n      `fourth`, `fifth`, or `last`.\n\nExamples:\n\n    # Run at 8am on the 1st, 15th, and last day of the month in January, March,\n    # May, July, September, and November, starting after August 31st, 2011.\n    trigger => {\n      schedule   => monthly,\n      start_date => '2011-08-31',   # Defaults to 'today'\n      start_time => '08:00',        # Must be specified\n      months     => [1,3,5,7,9,11], # Defaults to all\n      on         => [1, 15, last],  # Must be specified\n    }\n\n    # Run at 8am on the first Monday of the month for January, March, and May,\n    # starting after August 31st, 2011.\n    trigger => {\n      schedule         => monthly,\n      start_date       => '2011-08-31', # Defaults to 'today'\n      start_time       => '08:00',      # Must be specified\n      months           => [1,3,5],      # Defaults to all\n      which_occurrence => first,        # Must be specified\n      day_of_week      => [mon],        # Must be specified\n    }","kind":"property"},"enabled":{"namevar":false,"description":"Whether the triggers for this task should be enabled. This attribute\naffects every trigger for the task; triggers cannot be enabled or\ndisabled individually.\n\nValid values are `true`, `false`.","kind":"property"},"command":{"namevar":false,"description":"The full path to the application to run, without any arguments.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"name":{"namevar":true,"description":"The name assigned to the scheduled task.  This will uniquely\nidentify the task on the system.","kind":"parameter"},"user":{"namevar":false,"description":"The user to run the scheduled task as.  Please note that not\nall security configurations will allow running a scheduled task\nas 'SYSTEM', and saving the scheduled task under these\nconditions will fail with a reported error of 'The operation\ncompleted successfully'.  It is recommended that you either\nchoose another user to run the scheduled task, or alter the\nsecurity policy to allow v1 scheduled tasks to run as the\n'SYSTEM' account.  Defaults to 'SYSTEM'.\n\nPlease also note that Puppet must be running as a privileged user\nin order to manage `scheduled_task` resources. Running as an\nunprivileged user will result in 'access denied' errors.","kind":"property"},"arguments":{"namevar":false,"description":"Any arguments or flags that should be passed to the command. Multiple arguments\nshould be specified as a space-separated string.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `scheduled_task`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"zfs":{"providers":{"zfs":{"description":"Provider for zfs.\n\n* Required binaries: `zfs`.","features":[]}},"description":"Manage zfs. Create destroy and set properties on zfs instances.\n\n**Autorequires:** If Puppet is managing the zpool at the root of this zfs\ninstance, the zfs resource will autorequire it. If Puppet is managing any\nparent zfs instances, the zfs resource will autorequire them.","features":{},"attributes":{"refreservation":{"namevar":false,"description":"The refreservation property. Valid values are `<size>`, `none`.","kind":"property"},"compression":{"namevar":false,"description":"The compression property. Valid values are `on`, `off`, `lzjb`, `gzip`, `gzip-[1-9]`, `zle`.","kind":"property"},"snapdir":{"namevar":false,"description":"The snapdir property. Valid values are `hidden`, `visible`.","kind":"property"},"primarycache":{"namevar":false,"description":"The primarycache property. Valid values are `all`, `none`, `metadata`.","kind":"property"},"exec":{"namevar":false,"description":"The exec property. Valid values are `on`, `off`.","kind":"property"},"setuid":{"namevar":false,"description":"The setuid property. Valid values are `on`, `off`.","kind":"property"},"reservation":{"namevar":false,"description":"The reservation property. Valid values are `<size>`, `none`.","kind":"property"},"copies":{"namevar":false,"description":"The copies property. Valid values are `1`, `2`, `3`.","kind":"property"},"volsize":{"namevar":false,"description":"The volsize property. Valid values are `<size>`","kind":"property"},"quota":{"namevar":false,"description":"The quota property. Valid values are `<size>`, `none`.","kind":"property"},"mountpoint":{"namevar":false,"description":"The mountpoint property. Valid values are `<path>`, `legacy`, `none`.","kind":"property"},"secondarycache":{"namevar":false,"description":"The secondarycache property. Valid values are `all`, `none`, `metadata`.","kind":"property"},"dedup":{"namevar":false,"description":"The dedup property. Valid values are `on`, `off`.","kind":"property"},"vscan":{"namevar":false,"description":"The vscan property. Valid values are `on`, `off`.","kind":"property"},"readonly":{"namevar":false,"description":"The readonly property. Valid values are `on`, `off`.","kind":"property"},"aclinherit":{"namevar":false,"description":"The aclinherit property. Valid values are `discard`, `noallow`, `restricted`, `passthrough`, `passthrough-x`.","kind":"property"},"shareiscsi":{"namevar":false,"description":"The shareiscsi property. Valid values are `on`, `off`, `type=<type>`.","kind":"property"},"devices":{"namevar":false,"description":"The devices property. Valid values are `on`, `off`.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"xattr":{"namevar":false,"description":"The xattr property. Valid values are `on`, `off`.","kind":"property"},"recordsize":{"namevar":false,"description":"The recordsize property. Valid values are powers of two between 512 and 128k.","kind":"property"},"aclmode":{"namevar":false,"description":"The aclmode property. Valid values are `discard`, `groupmask`, `passthrough`.","kind":"property"},"name":{"namevar":true,"description":"The full name for this filesystem (including the zpool).","kind":"parameter"},"sharenfs":{"namevar":false,"description":"The sharenfs property. Valid values are `on`, `off`, share(1M) options","kind":"property"},"logbias":{"namevar":false,"description":"The logbias property. Valid values are `latency`, `throughput`.","kind":"property"},"zoned":{"namevar":false,"description":"The zoned property. Valid values are `on`, `off`.","kind":"property"},"version":{"namevar":false,"description":"The version property. Valid values are `1`, `2`, `3`, `4`, `current`.","kind":"property"},"refquota":{"namevar":false,"description":"The refquota property. Valid values are `<size>`, `none`.","kind":"property"},"canmount":{"namevar":false,"description":"The canmount property. Valid values are `on`, `off`, `noauto`.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `zfs`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"sharesmb":{"namevar":false,"description":"The sharesmb property. Valid values are `on`, `off`, sharemgr(1M) options","kind":"property"},"nbmand":{"namevar":false,"description":"The nbmand property. Valid values are `on`, `off`.","kind":"property"},"checksum":{"namevar":false,"description":"The checksum property. Valid values are `on`, `off`, `fletcher2`, `fletcher4`, `sha256`.","kind":"property"},"atime":{"namevar":false,"description":"The atime property. Valid values are `on`, `off`.","kind":"property"}}},"maillist":{"providers":{"mailman":{"description":"* Required binaries: `/var/lib/mailman/mail/mailman`, `list_lists`, `newlist`, `rmlist`.","features":[]}},"description":"Manage email lists.  This resource type can only create\nand remove lists; it cannot currently reconfigure them.","features":{},"attributes":{"password":{"namevar":false,"description":"The admin password.","kind":"parameter"},"admin":{"namevar":false,"description":"The email address of the administrator.","kind":"parameter"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`, `purged`.","kind":"property"},"name":{"namevar":true,"description":"The name of the email list.","kind":"parameter"},"description":{"namevar":false,"description":"The description of the mailing list.","kind":"parameter"},"webserver":{"namevar":false,"description":"The name of the host providing web archives and the administrative interface.","kind":"parameter"},"mailserver":{"namevar":false,"description":"The name of the host handling email for the list.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `maillist`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"mount":{"providers":{"parsed":{"description":"* Required binaries: `mount`, `umount`.\n* Supported features: `refreshable`.","features":["refreshable"]}},"description":"Manages mounted filesystems, including putting mount\ninformation into the mount table. The actual behavior depends\non the value of the 'ensure' parameter.\n\nNote that if a `mount` receives an event from another resource,\nit will try to remount the filesystems if `ensure` is set to `mounted`.\n\n**Autorequires:** If Puppet is managing any parents of a mount resource ---\nthat is, other mount points higher up in the filesystem --- the child\nmount will autorequire them.","features":{"refreshable":"The provider can remount the filesystem."},"attributes":{"pass":{"namevar":false,"description":"The pass in which the mount is checked.","kind":"property"},"remounts":{"namevar":false,"description":"Whether the mount can be remounted  `mount -o remount`.  If\nthis is false, then the filesystem will be unmounted and remounted\nmanually, which is prone to failure.\n\nValid values are `true`, `false`.","kind":"parameter"},"device":{"namevar":false,"description":"The device providing the mount.  This can be whatever\ndevice is supporting by the mount, including network\ndevices or devices specified by UUID rather than device\npath, depending on the operating system.","kind":"property"},"dump":{"namevar":false,"description":"Whether to dump the mount.  Not all platform support this.\nValid values are `1` or `0`. or `2` on FreeBSD, Default is `0`.\n\nValues can match `/(0|1)/`, `/(0|1)/`.","kind":"property"},"fstype":{"namevar":false,"description":"The mount type.  Valid values depend on the\noperating system.  This is a required option.","kind":"property"},"ensure":{"namevar":false,"description":"Control what to do with this mount. Set this attribute to\n`unmounted` to make sure the filesystem is in the filesystem table\nbut not mounted (if the filesystem is currently mounted, it will be\nunmounted).  Set it to `absent` to unmount (if necessary) and remove\nthe filesystem from the fstab.  Set to `mounted` to add it to the\nfstab and mount it. Set to `present` to add to fstab but not change\nmount/unmount status.\n\nValid values are `defined` (also called `present`), `unmounted`, `absent`, `mounted`.","kind":"property"},"target":{"namevar":false,"description":"The file in which to store the mount table.  Only used by\nthose providers that write to disk.","kind":"property"},"blockdevice":{"namevar":false,"description":"The device to fsck.  This is property is only valid\non Solaris, and in most cases will default to the correct\nvalue.","kind":"property"},"name":{"namevar":true,"description":"The mount path for the mount.","kind":"parameter"},"atboot":{"namevar":false,"description":"Whether to mount the mount at boot.  Not all platforms\nsupport this.","kind":"property"},"options":{"namevar":false,"description":"Mount options for the mounts, as they would\nappear in the fstab.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `mount`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"nagios_timeperiod":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type timeperiod.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_timeperiod.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"friday":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"sunday":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"saturday":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"monday":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"exclude":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"tuesday":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The target.","kind":"property"},"wednesday":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"alias":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"thursday":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"timeperiod_name":{"namevar":true,"description":"The name of this nagios_timeperiod resource.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_timeperiod`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"nagios_servicedependency":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type servicedependency.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_servicedependency.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"dependency_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"dependent_hostgroup_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"dependent_service_description":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"inherits_parent":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"hostgroup_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"_naginator_name":{"namevar":true,"description":"The name of this nagios_servicedependency resource.","kind":"parameter"},"target":{"namevar":false,"description":"The target.","kind":"property"},"execution_failure_criteria":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_failure_criteria":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_servicedependency`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"service_description":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"dependent_host_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"nagios_servicegroup":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type servicegroup.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_servicegroup.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"servicegroup_name":{"namevar":true,"description":"The name of this nagios_servicegroup resource.","kind":"parameter"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"servicegroup_members":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"members":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The target.","kind":"property"},"alias":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_servicegroup`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"action_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"filebucket":{"providers":{},"description":"A repository for storing and retrieving file content by MD5 checksum. Can\nbe local to each agent node, or centralized on a puppet master server. All\npuppet masters provide a filebucket service that agent nodes can access\nvia HTTP, but you must declare a filebucket resource before any agents\nwill do so.\n\nFilebuckets are used for the following features:\n\n- **Content backups.** If the `file` type's `backup` attribute is set to\n  the name of a filebucket, Puppet will back up the _old_ content whenever\n  it rewrites a file; see the documentation for the `file` type for more\n  details. These backups can be used for manual recovery of content, but\n  are more commonly used to display changes and differences in a tool like\n  Puppet Dashboard.\n- **Content distribution.** The optional static compiler populates the\n  puppet master's filebucket with the _desired_ content for each file,\n  then instructs the agent to retrieve the content for a specific\n  checksum. For more details,\n  [see the `static_compiler` section in the catalog indirection docs](http://docs.puppetlabs.com/references/latest/indirection.html#catalog).\n\nTo use a central filebucket for backups, you will usually want to declare\na filebucket resource and a resource default for the `backup` attribute\nin site.pp:\n\n    # /etc/puppet/manifests/site.pp\n    filebucket { 'main':\n      path   => false,                # This is required for remote filebuckets.\n      server => 'puppet.example.com', # Optional; defaults to the configured puppet master.\n    }\n\n    File { backup => main, }\n\nPuppet master servers automatically provide the filebucket service, so\nthis will work in a default configuration. If you have a heavily\nrestricted `auth.conf` file, you may need to allow access to the\n`file_bucket_file` endpoint.","features":{},"attributes":{"path":{"namevar":false,"description":"The path to the _local_ filebucket; defaults to the value of the\n`clientbucketdir` setting.  To use a remote filebucket, you _must_ set\nthis attribute to `false`.","kind":"parameter"},"server":{"namevar":false,"description":"The server providing the remote filebucket service. Defaults to the\nvalue of the `server` setting (that is, the currently configured\npuppet master server).\n\nThis setting is _only_ consulted if the `path` attribute is set to `false`.","kind":"parameter"},"port":{"namevar":false,"description":"The port on which the remote server is listening. Defaults to the\nvalue of the `masterport` setting, which is usually 8140.","kind":"parameter"},"name":{"namevar":true,"description":"The name of the filebucket.","kind":"parameter"}}},"sshkey":{"providers":{"parsed":{"description":"Parse and generate host-wide known hosts files for SSH.","features":[]}},"description":"Installs and manages ssh host keys.  At this point, this type\nonly knows how to install keys into `/etc/ssh/ssh_known_hosts`.  See\nthe `ssh_authorized_key` type to manage authorized keys.","features":{},"attributes":{"type":{"namevar":false,"description":"The encryption type used.  Probably ssh-dss or ssh-rsa.\n\nValid values are `ssh-dss` (also called `dsa`), `ssh-rsa` (also called `rsa`), `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp521`.","kind":"property"},"key":{"namevar":false,"description":"The key itself; generally a long string of hex digits.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The file in which to store the ssh key.  Only used by\nthe `parsed` provider.","kind":"property"},"name":{"namevar":true,"description":"The host name that the key is associated with.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `sshkey`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"host_aliases":{"namevar":false,"description":"Any aliases the host might have.  Multiple values must be\nspecified as an array.","kind":"property"}}},"augeas":{"providers":{"augeas":{"description":"* Supported features: `execute_changes`, `need_to_run?`, `parse_commands`.","features":["execute_changes","need_to_run?","parse_commands"]}},"description":"Apply a change or an array of changes to the filesystem\nusing the augeas tool.\n\nRequires:\n\n- [Augeas](http://www.augeas.net)\n- The ruby-augeas bindings\n\nSample usage with a string:\n\n    augeas{\"test1\" :\n      context => \"/files/etc/sysconfig/firstboot\",\n      changes => \"set RUN_FIRSTBOOT YES\",\n      onlyif  => \"match other_value size > 0\",\n    }\n\nSample usage with an array and custom lenses:\n\n    augeas{\"jboss_conf\":\n      context   => \"/files\",\n      changes   => [\n          \"set etc/jbossas/jbossas.conf/JBOSS_IP $ipaddress\",\n          \"set etc/jbossas/jbossas.conf/JAVA_HOME /usr\",\n        ],\n      load_path => \"$/usr/share/jbossas/lenses\",\n    }","features":{"need_to_run?":"If the command should run","parse_commands":"Parse the command string","execute_changes":"Actually make the changes"},"attributes":{"load_path":{"namevar":false,"description":"Optional colon-separated list or array of directories; these directories are searched for schema definitions. The agent's `$libdir/augeas/lenses` path will always be added to support pluginsync.","kind":"parameter"},"incl":{"namevar":false,"description":"Load only a specific file, e.g. `/etc/hosts`. This can greatly speed\nup the execution the resource. When this parameter is set, you must also\nset the `lens` parameter to indicate which lens to use.","kind":"parameter"},"context":{"namevar":false,"description":"Optional context path. This value is prepended to the paths of all\nchanges if the path is relative. If the `incl` parameter is set,\ndefaults to `/files + incl`; otherwise, defaults to the empty string.","kind":"parameter"},"changes":{"namevar":false,"description":"The changes which should be applied to the filesystem. This\ncan be a command or an array of commands. The following commands are supported:\n\n* `set <PATH> <VALUE>` --- Sets the value `VALUE` at loction `PATH`\n* `setm <PATH> <SUB> <VALUE>` --- Sets multiple nodes (matching `SUB` relative to `PATH`) to `VALUE`\n* `rm <PATH>` --- Removes the node at location `PATH`\n* `remove <PATH>` --- Synonym for `rm`\n* `clear <PATH>` --- Sets the node at `PATH` to `NULL`, creating it if needed\n* `clearm <PATH> <SUB>` --- Sets multiple nodes (matching `SUB` relative to `PATH`) to `NULL`\n* `ins <LABEL> (before|after) <PATH>` --- Inserts an empty node `LABEL` either before or after `PATH`.\n* `insert <LABEL> <WHERE> <PATH>` --- Synonym for `ins`\n* `mv <PATH> <OTHER PATH>` --- Moves a node at `PATH` to the new location `OTHER PATH`\n* `move <PATH> <OTHER PATH>` --- Synonym for `mv`\n* `defvar <NAME> <PATH>` --- Sets Augeas variable `$NAME` to `PATH`\n* `defnode <NAME> <PATH> <VALUE>` --- Sets Augeas variable `$NAME` to `PATH`, creating it with `VALUE` if needed\n\nIf the `context` parameter is set, that value is prepended to any relative `PATH`s.","kind":"parameter"},"returns":{"namevar":false,"description":"The expected return code from the augeas command. Should not be set.","kind":"property"},"onlyif":{"namevar":false,"description":"Optional augeas command and comparisons to control the execution of this type.\nSupported onlyif syntax:\n\n* `get <AUGEAS_PATH> <COMPARATOR> <STRING>`\n* `match <MATCH_PATH> size <COMPARATOR> <INT>`\n* `match <MATCH_PATH> include <STRING>`\n* `match <MATCH_PATH> not_include <STRING>`\n* `match <MATCH_PATH> == <AN_ARRAY>`\n* `match <MATCH_PATH> != <AN_ARRAY>`\n\nwhere:\n\n* `AUGEAS_PATH` is a valid path scoped by the context\n* `MATCH_PATH` is a valid match synatx scoped by the context\n* `COMPARATOR` is one of `>, >=, !=, ==, <=,` or `<`\n* `STRING` is a string\n* `INT` is a number\n* `AN_ARRAY` is in the form `['a string', 'another']`","kind":"parameter"},"root":{"namevar":false,"description":"A file system path; all files loaded by Augeas are loaded underneath `root`.","kind":"parameter"},"force":{"namevar":false,"description":"Optional command to force the augeas type to execute even if it thinks changes\nwill not be made. This does not overide the `onlyif` parameter.","kind":"parameter"},"type_check":{"namevar":false,"description":"Whether augeas should perform typechecking. Defaults to false.\n\nValid values are `true`, `false`.","kind":"parameter"},"lens":{"namevar":false,"description":"Use a specific lens, e.g. `Hosts.lns`. When this parameter is set, you\nmust also set the `incl` parameter to indicate which file to load.","kind":"parameter"},"name":{"namevar":true,"description":"The name of this task. Used for uniqueness.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `augeas`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"cron":{"providers":{"crontab":{"description":"* Required binaries: `crontab`.","features":[]}},"description":"Installs and manages cron jobs.  Every cron resource requires a command\nand user attribute, as well as at least one periodic attribute (hour,\nminute, month, monthday, weekday, or special).  While the name of the cron\njob is not part of the actual job, it is used by Puppet to store and\nretrieve it.\n\nIf you specify a cron resource that duplicates the scheduling and command\nused by an existing crontab entry, then Puppet will take no action and\ndefers to the existing crontab entry.  If the duplicate cron resource\nspecifies `ensure => absent`, all existing duplicated crontab entries will\nbe removed.  Specifying multiple duplicate cron resources with different\n`ensure` states will result in undefined behavior.\n\nExample:\n\n    cron { logrotate:\n      command => \"/usr/sbin/logrotate\",\n      user    => root,\n      hour    => 2,\n      minute  => 0\n    }\n\nNote that all periodic attributes can be specified as an array of values:\n\n    cron { logrotate:\n      command => \"/usr/sbin/logrotate\",\n      user    => root,\n      hour    => [2, 4]\n    }\n\n...or using ranges or the step syntax `*/2` (although there's no guarantee\nthat your `cron` daemon supports these):\n\n    cron { logrotate:\n      command => \"/usr/sbin/logrotate\",\n      user    => root,\n      hour    => ['2-4'],\n      minute  => '*/10'\n    }\n\nAn important note: _the Cron type will not reset parameters that are\nremoved from a manifest_. For example, removing a `minute => 10` parameter\nwill not reset the minute component of the associated cronjob to `*`.\nThese changes must be expressed by setting the parameter to\n`minute => absent` because Puppet only manages parameters that are out of\nsync with manifest entries.","features":{},"attributes":{"monthday":{"namevar":false,"description":"The day of the month on which to run the\ncommand.  Optional; if specified, must be between 1 and 31.","kind":"property"},"special":{"namevar":false,"description":"A special value such as 'reboot' or 'annually'.\nOnly available on supported systems such as Vixie Cron.\nOverrides more specific time of day/week settings.\nSet to 'absent' to make puppet revert to a plain numeric schedule.","kind":"property"},"environment":{"namevar":false,"description":"Any environment settings associated with this cron job.  They\nwill be stored between the header and the job in the crontab.  There\ncan be no guarantees that other, earlier settings will not also\naffect a given cron job.\n\n\nAlso, Puppet cannot automatically determine whether an existing,\nunmanaged environment setting is associated with a given cron\njob.  If you already have cron jobs with environment settings,\nthen Puppet will keep those settings in the same place in the file,\nbut will not associate them with a specific job.\n\nSettings should be specified exactly as they should appear in\nthe crontab, e.g., `PATH=/bin:/usr/bin:/usr/sbin`.","kind":"property"},"month":{"namevar":false,"description":"The month of the year.  Optional; if specified\nmust be between 1 and 12 or the month name (e.g., December).","kind":"property"},"command":{"namevar":false,"description":"The command to execute in the cron job.  The environment\nprovided to the command varies by local system rules, and it is\nbest to always provide a fully qualified command.  The user's\nprofile is not sourced when the command is run, so if the\nuser's environment is desired it should be sourced manually.\n\nAll cron parameters support `absent` as a value; this will\nremove any existing values for that field.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The username that will own the cron entry. Defaults to\nthe value of $USER for the shell that invoked Puppet, or root if $USER\nis empty.","kind":"property"},"minute":{"namevar":false,"description":"The minute at which to run the cron job.\nOptional; if specified, must be between 0 and 59, inclusive.","kind":"property"},"name":{"namevar":true,"description":"The symbolic name of the cron job.  This name\nis used for human reference only and is generated automatically\nfor cron jobs found on the system.  This generally won't\nmatter, as Puppet will do its best to match existing cron jobs\nagainst specified jobs (and Puppet adds a comment to cron jobs it adds),\nbut it is at least possible that converting from unmanaged jobs to\nmanaged jobs might require manual intervention.","kind":"parameter"},"user":{"namevar":false,"description":"The user to run the command as.  This user must\nbe allowed to run cron jobs, which is not currently checked by\nPuppet.\n\nThe user defaults to whomever Puppet is running as.","kind":"property"},"weekday":{"namevar":false,"description":"The weekday on which to run the command.\nOptional; if specified, must be between 0 and 7, inclusive, with\n0 (or 7) being Sunday, or must be the name of the day (e.g., Tuesday).","kind":"property"},"hour":{"namevar":false,"description":"The hour at which to run the cron job. Optional;\nif specified, must be between 0 and 23, inclusive.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `cron`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"nagios_service":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type service.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_service.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"poller_tag":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"flap_detection_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"obsess_over_service":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"retry_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"icon_image":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contacts":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"freshness_threshold":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"servicegroups":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"business_impact":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notifications_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"flap_detection_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"active_checks_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"icon_image_alt":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contact_groups":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"event_handler":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"check_command":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"is_volatile":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"stalking_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"failure_prediction_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"passive_checks_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"event_handler_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"normal_check_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"initial_state":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"process_perf_data":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"check_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"hostgroup_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"_naginator_name":{"namevar":true,"description":"The name of this nagios_service resource.","kind":"parameter"},"target":{"namevar":false,"description":"The target.","kind":"property"},"first_notification_delay":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"low_flap_threshold":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"retry_check_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"max_check_attempts":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"retain_status_information":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"high_flap_threshold":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"parallelize_check":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"check_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_service`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"action_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"retain_nonstatus_information":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"check_freshness":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"display_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"service_description":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"resources":{"providers":{},"description":"This is a metatype that can manage other resource types.  Any\nmetaparams specified here will be passed on to any generated resources,\nso you can purge umanaged resources but set `noop` to true so the\npurging is only logged and does not actually happen.","features":{},"attributes":{"purge":{"namevar":false,"description":"Purge unmanaged resources.  This will delete any resource\nthat is not specified in your configuration\nand is not required by any specified resources.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"unless_system_user":{"namevar":false,"description":"This keeps system users from being purged.  By default, it\ndoes not purge users whose UIDs are less than or equal to 500, but you can specify\na different UID as the inclusive limit.\n\nValid values are `true`, `false`. Values can match `/^\\d+$/`.","kind":"parameter"},"name":{"namevar":true,"description":"The name of the type to be managed.","kind":"parameter"}}},"selmodule":{"providers":{"semodule":{"description":"Manage SELinux policy modules using the semodule binary.\n\n* Required binaries: `/usr/sbin/semodule`.","features":[]}},"description":"Manages loading and unloading of SELinux policy modules\non the system.  Requires SELinux support.  See man semodule(8)\nfor more information on SELinux policy modules.\n\n**Autorequires:** If Puppet is managing the file containing this SELinux\npolicy module (which is either explicitly specified in the `selmodulepath`\nattribute or will be found at {`selmoduledir`}/{`name`}.pp), the selmodule\nresource will autorequire that file.","features":{},"attributes":{"selmodulepath":{"namevar":false,"description":"The full path to the compiled .pp policy module.  You only need to use\nthis if the module file is not in the `selmoduledir` directory.","kind":"parameter"},"syncversion":{"namevar":false,"description":"If set to `true`, the policy will be reloaded if the\nversion found in the on-disk file differs from the loaded\nversion.  If set to `false` (the default) the the only check\nthat will be made is if the policy is loaded at all or not.\n\nValid values are `true`, `false`.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"name":{"namevar":true,"description":"The name of the SELinux policy to be managed.  You should not\ninclude the customary trailing .pp extension.","kind":"parameter"},"selmoduledir":{"namevar":false,"description":"The directory to look for the compiled pp module file in.\nCurrently defaults to `/usr/share/selinux/targeted`.  If the\n`selmodulepath` attribute is not specified, Puppet will expect to find\nthe module in `<selmoduledir>/<name>.pp`, where `name` is the value of the\n`name` parameter.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `selmodule`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"yumrepo":{"providers":{},"description":"The client-side description of a yum repository. Repository\nconfigurations are found by parsing `/etc/yum.conf` and\nthe files indicated by the `reposdir` option in that file\n(see `yum.conf(5)` for details).\n\nMost parameters are identical to the ones documented\nin the `yum.conf(5)` man page.\n\nContinuation lines that yum supports (for the `baseurl`, for example)\nare not supported. This type does not attempt to read or verify the\nexinstence of files listed in the `include` attribute.","features":{},"attributes":{"protect":{"namevar":false,"description":"Enable or disable protection for this repository. Requires\nthat the `protectbase` plugin is installed and enabled.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/^(0|1)$/`.","kind":"property"},"descr":{"namevar":false,"description":"A human-readable description of the repository.\nThis corresponds to the name parameter in `yum.conf(5)`.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"sslclientcert":{"namevar":false,"description":"Path  to the SSL client certificate yum should use to connect\nto repos/remote sites. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"enablegroups":{"namevar":false,"description":"Whether yum will allow the use of package groups for this\nrepository, as represented by a `0` or `1`. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/^(0|1)$/`.","kind":"property"},"include":{"namevar":false,"description":"The URL of a remote file containing additional yum configuration\nsettings. Puppet does not check for this file's existence or validity.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"proxy_username":{"namevar":false,"description":"Username for this proxy. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"mirrorlist":{"namevar":false,"description":"The URL that holds the list of mirrors for this repository.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"sslclientkey":{"namevar":false,"description":"Path to the SSL client key yum should use to connect\nto repos/remote sites. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"proxy":{"namevar":false,"description":"URL to the proxy server for this repository. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"failovermethod":{"namevar":false,"description":"The failover methode for this repository; should be either\n`roundrobin` or `priority`. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/roundrobin|priority/`.","kind":"property"},"proxy_password":{"namevar":false,"description":"Password for this proxy. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"exclude":{"namevar":false,"description":"List of shell globs. Matching packages will never be\nconsidered in updates or installs for this repo.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"baseurl":{"namevar":false,"description":"The URL for this repository. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"keepalive":{"namevar":false,"description":"Whether HTTP/1.1 keepalive should be used with this repository, as\nrepresented by a `0` or `1`. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/^(0|1)$/`.","kind":"property"},"enabled":{"namevar":false,"description":"Whether this repository is enabled, as represented by a\n`0` or `1`. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/^(0|1)$/`.","kind":"property"},"s3_enabled":{"namevar":false,"description":"Access the repo via S3. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/^(0|1)$/`.","kind":"property"},"timeout":{"namevar":false,"description":"Number of seconds to wait for a connection before timing\nout. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/[0-9]+/`.","kind":"property"},"gpgcheck":{"namevar":false,"description":"Whether to check the GPG signature on packages installed\nfrom this repository, as represented by a `0` or `1`.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/^(0|1)$/`.","kind":"property"},"cost":{"namevar":false,"description":"Cost of this repository. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/\\d+/`.","kind":"property"},"http_caching":{"namevar":false,"description":"What to cache from this repository. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/packages|all|none/`.","kind":"property"},"name":{"namevar":true,"description":"The name of the repository.  This corresponds to the\n`repositoryid` parameter in `yum.conf(5)`.","kind":"parameter"},"sslcacert":{"namevar":false,"description":"Path to the directory containing the databases of the\ncertificate authorities yum should use to verify SSL certificates.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"gpgkey":{"namevar":false,"description":"The URL for the GPG key with which packages from this\nrepository are signed. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"},"metadata_expire":{"namevar":false,"description":"Number of seconds after which the metadata will expire.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/[0-9]+/`.","kind":"property"},"sslverify":{"namevar":false,"description":"Should yum verify SSL certificates/hosts at all.\nPossible values are 'True' or 'False'.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/True|False/`.","kind":"property"},"priority":{"namevar":false,"description":"Priority of this repository from 1-99. Requires that\nthe `priorities` plugin is installed and enabled.\nSet this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/[1-9][0-9]?/`.","kind":"property"},"includepkgs":{"namevar":false,"description":"List of shell globs. If this is set, only packages\nmatching one of the globs will be considered for\nupdate or install from this repo. Set this to `absent` to remove it from the file completely.\n\nValid values are `absent`. Values can match `/.*/`.","kind":"property"}}},"zone":{"providers":{"solaris":{"description":"Provider for Solaris Zones.\n\n* Required binaries: `/usr/sbin/zoneadm`, `/usr/sbin/zonecfg`.\n* Default for `osfamily` == `solaris`.","features":[]}},"description":"Manages Solaris zones.\n\n**Autorequires:** If Puppet is managing the directory specified as the root of\nthe zone's filesystem (with the `path` attribute), the zone resource will\nautorequire that directory.","features":{},"attributes":{"iptype":{"namevar":false,"description":"The IP stack type of the zone.\n\nValid values are `shared`, `exclusive`.","kind":"property"},"sysidcfg":{"namevar":false,"description":"The text to go into the `sysidcfg` file when the zone is first\nbooted.  The best way is to use a template:\n\n    # $confdir/modules/site/templates/sysidcfg.erb\n    system_locale=en_US\n    timezone=GMT\n    terminal=xterms\n    security_policy=NONE\n    root_password=<%= password %>\n    timeserver=localhost\n    name_service=DNS {domain_name=<%= domain %> name_server=<%= nameserver %>}\n    network_interface=primary {hostname=<%= realhostname %>\n      ip_address=<%= ip %>\n      netmask=<%= netmask %>\n      protocol_ipv6=no\n      default_route=<%= defaultroute %>}\n    nfs4_domain=dynamic\n\nAnd then call that:\n\n    zone { myzone:\n      ip           => \"bge0:192.168.0.23\",\n      sysidcfg     => template(\"site/sysidcfg.erb\"),\n      path         => \"/opt/zones/myzone\",\n      realhostname => \"fully.qualified.domain.name\"\n    }\n\nThe `sysidcfg` only matters on the first booting of the zone,\nso Puppet only checks for it at that time.","kind":"parameter"},"path":{"namevar":false,"description":"The root of the zone's filesystem.  Must be a fully qualified\nfile name.  If you include `%s` in the path, then it will be\nreplaced with the zone's name.  Currently, you cannot use\nPuppet to move a zone. Consequently this is a readonly property.","kind":"property"},"autoboot":{"namevar":false,"description":"Whether the zone should automatically boot.\n\nValid values are `true`, `false`.","kind":"property"},"ip":{"namevar":false,"description":"The IP address of the zone.  IP addresses must be specified\nwith the interface, separated by a colon, e.g.: bge0:192.168.0.1.\nFor multiple interfaces, specify them in an array.","kind":"property"},"create_args":{"namevar":false,"description":"Arguments to the `zonecfg` create command.  This can be used to create branded zones.","kind":"parameter"},"clone":{"namevar":false,"description":"Instead of installing the zone, clone it from another zone.\nIf the zone root resides on a zfs file system, a snapshot will be\nused to create the clone; if it resides on a ufs filesystem, a copy of the\nzone will be used. The zone from which you clone must not be running.","kind":"parameter"},"pool":{"namevar":false,"description":"The resource pool for this zone.","kind":"property"},"install_args":{"namevar":false,"description":"Arguments to the `zoneadm` install command.  This can be used to create branded zones.","kind":"parameter"},"shares":{"namevar":false,"description":"Number of FSS CPU shares allocated to the zone.","kind":"property"},"ensure":{"namevar":false,"description":"The running state of the zone.  The valid states directly reflect\nthe states that `zoneadm` provides.  The states are linear,\nin that a zone must be `configured`, then `installed`, and\nonly then can be `running`.  Note also that `halt` is currently\nused to stop zones.\n\nValid values are `absent`, `configured`, `installed`, `running`.","kind":"property"},"realhostname":{"namevar":false,"description":"The actual hostname of the zone.","kind":"parameter"},"name":{"namevar":true,"description":"The name of the zone.","kind":"parameter"},"dataset":{"namevar":false,"description":"The list of datasets delegated to the non-global zone from the\nglobal zone.  All datasets must be zfs filesystem names which are\ndifferent from the mountpoint.","kind":"property"},"id":{"namevar":false,"description":"The numerical ID of the zone.  This number is autogenerated\nand cannot be changed.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `zone`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"inherit":{"namevar":false,"description":"The list of directories that the zone inherits from the global\nzone.  All directories must be fully qualified.","kind":"property"}}},"nagios_host":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type host.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_host.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"poller_tag":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"flap_detection_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"retry_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"icon_image":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contacts":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"freshness_threshold":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"hostgroups":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"business_impact":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notifications_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"flap_detection_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"active_checks_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"address":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"icon_image_alt":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contact_groups":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"event_handler":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"check_command":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"stalking_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"failure_prediction_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"passive_checks_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"vrml_image":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"event_handler_enabled":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"initial_state":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"process_perf_data":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"check_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The target.","kind":"property"},"statusmap_image":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"first_notification_delay":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"low_flap_threshold":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"max_check_attempts":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"alias":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_name":{"namevar":true,"description":"The name of this nagios_host resource.","kind":"parameter"},"notes_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"retain_status_information":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"obsess_over_host":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"realm":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"high_flap_threshold":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"check_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"parents":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_host`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"action_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"retain_nonstatus_information":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"check_freshness":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"display_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"nagios_hostdependency":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type hostdependency.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_hostdependency.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"dependency_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"dependent_hostgroup_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"inherits_parent":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"hostgroup_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"_naginator_name":{"namevar":true,"description":"The name of this nagios_hostdependency resource.","kind":"parameter"},"target":{"namevar":false,"description":"The target.","kind":"property"},"execution_failure_criteria":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_failure_criteria":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_hostdependency`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"dependent_host_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"nagios_hostgroup":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type hostgroup.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_hostgroup.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"hostgroup_name":{"namevar":true,"description":"The name of this nagios_hostgroup resource.","kind":"parameter"},"notes":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"members":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The target.","kind":"property"},"alias":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"hostgroup_members":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"realm":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_hostgroup`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"action_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"service":{"providers":{"daemontools":{"description":"Daemontools service management.\n\nThis provider manages daemons supervised by D.J. Bernstein daemontools.\nWhen detecting the service directory it will check, in order of preference:\n\n* `/service`\n* `/etc/service`\n* `/var/lib/svscan`\n\nThe daemon directory should be in one of the following locations:\n\n* `/var/lib/service`\n* `/etc`\n\n...or this can be overriden in the resource's attributes:\n\n    service { \"myservice\":\n      provider => \"daemontools\",\n      path     => \"/path/to/daemons\",\n    }\n\nThis provider supports out of the box:\n\n* start/stop (mapped to enable/disable)\n* enable/disable\n* restart\n* status\n\nIf a service has `ensure => \"running\"`, it will link /path/to/daemon to\n/path/to/service, which will automatically enable the service.\n\nIf a service has `ensure => \"stopped\"`, it will only shut down the service, not\nremove the `/path/to/service` link.\n\n* Required binaries: `/usr/bin/svc`, `/usr/bin/svstat`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"openbsd":{"description":"Provider for OpenBSD's rc.d daemon control scripts\n\n* Default for `operatingsystem` == `openbsd`.\n* Supported features: `refreshable`.","features":["refreshable"]},"smf":{"description":"Support for Sun's new Service Management Framework.\n\nStarting a service is effectively equivalent to enabling it, so there is\nonly support for starting and stopping services, which also enables and\ndisables them, respectively.\n\nBy specifying `manifest => \"/path/to/service.xml\"`, the SMF manifest will\nbe imported if it does not exist.\n\n* Required binaries: `/usr/bin/svcs`, `/usr/sbin/svcadm`, `/usr/sbin/svccfg`.\n* Default for `osfamily` == `solaris`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"init":{"description":"Standard `init`-style service management.\n\n* Supported features: `refreshable`.","features":["refreshable"]},"upstart":{"description":"Ubuntu service management with `upstart`.\n\nThis provider manages `upstart` jobs, which have replaced `initd` services\non Ubuntu. For `upstart` documentation, see <http://upstart.ubuntu.com/>.\n\n* Required binaries: `/sbin/initctl`, `/sbin/restart`, `/sbin/start`, `/sbin/status`, `/sbin/stop`.\n* Default for `operatingsystem` == `ubuntu`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"debian":{"description":"Debian's form of `init`-style management.\n\nThe only differences from `init` are support for enabling and disabling\nservices via `update-rc.d` and the ability to determine enabled status via\n`invoke-rc.d`.\n\n* Required binaries: `/usr/sbin/invoke-rc.d`, `/usr/sbin/update-rc.d`.\n* Default for `operatingsystem` == `debian, ubuntu`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"base":{"description":"The simplest form of Unix service support.\n\nYou have to specify enough about your service for this to work; the\nminimum you can specify is a binary for starting the process, and this\nsame binary will be searched for in the process table to stop the\nservice.  As with `init`-style services, it is preferable to specify start,\nstop, and status commands.\n\n* Required binaries: `kill`.\n* Supported features: `refreshable`.","features":["refreshable"]},"gentoo":{"description":"Gentoo's form of `init`-style service management.\n\nUses `rc-update` for service enabling and disabling.\n\n* Required binaries: `/sbin/rc-update`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"bsd":{"description":"FreeBSD's (and probably NetBSD's?) form of `init`-style service management.\n\nUses `rc.conf.d` for service enabling and disabling.\n\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"openrc":{"description":"Support for Gentoo's OpenRC initskripts\n\nUses rc-update, rc-status and rc-service to manage services.\n\n* Required binaries: `/bin/rc-status`, `/sbin/rc-service`, `/sbin/rc-update`.\n* Default for `operatingsystem` == `funtoo`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"runit":{"description":"Runit service management.\n\nThis provider manages daemons running supervised by Runit.\nWhen detecting the service directory it will check, in order of preference:\n\n* `/service`\n* `/etc/service`\n* `/var/service`\n\nThe daemon directory should be in one of the following locations:\n\n* `/etc/sv`\n* `/var/lib/service`\n\nor this can be overriden in the service resource parameters::\n\n    service { \"myservice\":\n      provider => \"runit\",\n      path => \"/path/to/daemons\",\n    }\n\nThis provider supports out of the box:\n\n* start/stop\n* enable/disable\n* restart\n* status\n\n* Required binaries: `/usr/bin/sv`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"systemd":{"description":"Manages `systemd` services using `systemctl`.\n\n* Required binaries: `systemctl`.\n* Default for `osfamily` == `archlinux`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"service":{"description":"The simplest form of service support.\n\n* Supported features: `refreshable`.","features":["refreshable"]},"launchd":{"description":"This provider manages jobs with `launchd`, which is the default service\nframework for Mac OS X (and may be available for use on other platforms).\n\nFor `launchd` documentation, see:\n\n* <http://developer.apple.com/macosx/launchd.html>\n* <http://launchd.macosforge.org/>\n\nThis provider reads plists out of the following directories:\n\n* `/System/Library/LaunchDaemons`\n* `/System/Library/LaunchAgents`\n* `/Library/LaunchDaemons`\n* `/Library/LaunchAgents`\n\n...and builds up a list of services based upon each plist's \"Label\" entry.\n\nThis provider supports:\n\n* ensure => running/stopped,\n* enable => true/false\n* status\n* restart\n\nHere is how the Puppet states correspond to `launchd` states:\n\n* stopped --- job unloaded\n* started --- job loaded\n* enabled --- 'Disable' removed from job plist file\n* disabled --- 'Disable' added to job plist file\n\nNote that this allows you to do something `launchctl` can't do, which is to\nbe in a state of \"stopped/enabled\" or \"running/disabled\".\n\nNote that this provider does not support overriding 'restart' or 'status'.\n\n* Required binaries: `/bin/launchctl`, `/usr/bin/plutil`, `/usr/bin/sw_vers`.\n* Default for `operatingsystem` == `darwin`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"openwrt":{"description":"Support for OpenWrt flavored init scripts.\n\nUses /etc/init.d/service_name enable, disable, and enabled.\n\n* Default for `operatingsystem` == `openwrt`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"redhat":{"description":"Red Hat's (and probably many others') form of `init`-style service\nmanagement. Uses `chkconfig` for service enabling and disabling.\n\n* Required binaries: `/sbin/chkconfig`, `/sbin/service`.\n* Default for `osfamily` == `redhat, suse`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"freebsd":{"description":"Provider for FreeBSD and DragonFly BSD. Uses the `rcvar` argument of init scripts and parses/edits rc files.\n\n* Default for `operatingsystem` == `freebsd, dragonfly`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"src":{"description":"Support for AIX's System Resource controller.\n\nServices are started/stopped based on the `stopsrc` and `startsrc`\ncommands, and some services can be refreshed with `refresh` command.\n\nEnabling and disabling services is not supported, as it requires\nmodifications to `/etc/inittab`. Starting and stopping groups of subsystems\nis not yet supported.\n\n* Required binaries: `/usr/bin/lssrc`, `/usr/bin/refresh`, `/usr/bin/startsrc`, `/usr/bin/stopsrc`, `/usr/sbin/chitab`, `/usr/sbin/lsitab`, `/usr/sbin/mkitab`, `/usr/sbin/rmitab`.\n* Default for `operatingsystem` == `aix`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]},"windows":{"description":"Support for Windows Service Control Manager (SCM). This provider can\nstart, stop, enable, and disable services, and the SCM provides working\nstatus methods for all services.\n\nControl of service groups (dependencies) is not yet supported, nor is running\nservices as a specific user.\n\n* Required binaries: `net.exe`.\n* Default for `operatingsystem` == `windows`.\n* Supported features: `enableable`, `refreshable`.","features":["enableable","refreshable"]}},"description":"Manage running services.  Service support unfortunately varies\nwidely by platform --- some platforms have very little if any concept of a\nrunning service, and some have a very codified and powerful concept.\nPuppet's service support is usually capable of doing the right thing, but\nthe more information you can provide, the better behaviour you will get.\n\nPuppet 2.7 and newer expect init scripts to have a working status command.\nIf this isn't the case for any of your services' init scripts, you will\nneed to set `hasstatus` to false and possibly specify a custom status\ncommand in the `status` attribute.\n\nNote that if a `service` receives an event from another resource,\nthe service will get restarted. The actual command to restart the\nservice depends on the platform. You can provide an explicit command for\nrestarting with the `restart` attribute, or you can set `hasrestart` to\ntrue to use the init script's restart command; if you do neither, the\nservice's stop and start commands will be used.","features":{"enableable":"The provider can enable and disable the service","refreshable":"The provider can restart the service.","controllable":"The provider uses a control variable."},"attributes":{"status":{"namevar":false,"description":"Specify a *status* command manually.  This command must\nreturn 0 if the service is running and a nonzero value otherwise.\nIdeally, these exit codes should conform to [the LSB's\nspecification][lsb-exit-codes] for init script status actions, but\nPuppet only considers the difference between 0 and nonzero to be\nrelevant.\n\nIf left unspecified, the status of the service will be determined\nautomatically, usually by looking for the service in the process\ntable.\n\n[lsb-exit-codes]: http://refspecs.linuxfoundation.org/LSB_4.1.0/LSB-Core-generic/LSB-Core-generic/iniscrptact.html","kind":"parameter"},"binary":{"namevar":false,"description":"The path to the daemon.  This is only used for\nsystems that do not support init scripts.  This binary will be\nused to start the service if no `start` parameter is\nprovided.","kind":"parameter"},"path":{"namevar":false,"description":"The search path for finding init scripts.  Multiple values should\nbe separated by colons or provided as an array.","kind":"parameter"},"pattern":{"namevar":false,"description":"The pattern to search for in the process table.\nThis is used for stopping services on platforms that do not\nsupport init scripts, and is also used for determining service\nstatus on those service whose init scripts do not include a status\ncommand.\n\nDefaults to the name of the service. The pattern can be a simple string\nor any legal Ruby pattern.","kind":"parameter"},"hasrestart":{"namevar":false,"description":"Specify that an init script has a `restart` command.  If this is\nfalse and you do not specify a command in the `restart` attribute,\nthe init script's `stop` and `start` commands will be used.\n\nDefaults to false.\n\nValid values are `true`, `false`.","kind":"parameter"},"enable":{"namevar":false,"description":"Whether a service should be enabled to start at boot.\nThis property behaves quite differently depending on the platform;\nwherever possible, it relies on local tools to enable or disable\na given service.\n\nValid values are `true`, `false`, `manual`.\n\nRequires features enableable.","kind":"property"},"restart":{"namevar":false,"description":"Specify a *restart* command manually.  If left\nunspecified, the service will be stopped and then started.","kind":"parameter"},"start":{"namevar":false,"description":"Specify a *start* command manually.  Most service subsystems\nsupport a `start` command, so this will not need to be\nspecified.","kind":"parameter"},"hasstatus":{"namevar":false,"description":"Declare whether the service's init script has a functional status\ncommand; defaults to `true`. This attribute's default value changed in\nPuppet 2.7.0.\n\nThe init script's status command must return 0 if the service is\nrunning and a nonzero value otherwise. Ideally, these exit codes\nshould conform to [the LSB's specification][lsb-exit-codes] for init\nscript status actions, but Puppet only considers the difference\nbetween 0 and nonzero to be relevant.\n\nIf a service's init script does not support any kind of status command,\nyou should set `hasstatus` to false and either provide a specific\ncommand using the `status` attribute or expect that Puppet will look for\nthe service name in the process table. Be aware that 'virtual' init\nscripts (like 'network' under Red Hat systems) will respond poorly to\nrefresh events from other resources if you override the default behavior\nwithout providing a status command.\n\nValid values are `true`, `false`.","kind":"parameter"},"ensure":{"namevar":false,"description":"Whether a service should be running.\n\nValid values are `stopped` (also called `false`), `running` (also called `true`).","kind":"property"},"stop":{"namevar":false,"description":"Specify a *stop* command manually.","kind":"parameter"},"name":{"namevar":true,"description":"The name of the service to run.\n\nThis name is used to find the service; on platforms where services\nhave short system names and long display names, this should be the\nshort name. (To take an example from Windows, you would use \"wuauserv\"\nrather than \"Automatic Updates.\")","kind":"parameter"},"control":{"namevar":false,"description":"The control variable used to manage services (originally for HP-UX).\nDefaults to the upcased service name plus `START` replacing dots with\nunderscores, for those providers that support the `controllable` feature.","kind":"parameter"},"manifest":{"namevar":false,"description":"Specify a command to config a service, or a path to a manifest to do so.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `service`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"user":{"providers":{"useradd":{"description":"User management via `useradd` and its ilk.  Note that you will need to\ninstall Ruby's shadow password library (often known as `ruby-libshadow`)\nif you wish to manage user passwords.\n\n* Required binaries: `chage`, `luseradd`, `useradd`, `userdel`, `usermod`.\n* Supported features: `allows_duplicates`, `manages_expiry`, `manages_homedir`, `system_users`.","features":["allows_duplicates","manages_expiry","manages_homedir","system_users","manages_passwords","manages_password_age","libuser"]},"ldap":{"description":"User management via LDAP.\n\nThis provider requires that you have valid values for all of the\nLDAP-related settings in `puppet.conf`, including `ldapbase`.  You will\nalmost definitely need settings for `ldapuser` and `ldappassword` in order\nfor your clients to write to LDAP.\n\nNote that this provider will automatically generate a UID for you if\nyou do not specify one, but it is a potentially expensive operation,\nas it iterates across all existing users to pick the appropriate next one.\n\n* Supported features: `manages_passwords`.","features":["manages_passwords"]},"pw":{"description":"User management via `pw` on FreeBSD and DragonFly BSD.\n\n* Required binaries: `pw`.\n* Default for `operatingsystem` == `freebsd, dragonfly`.\n* Supported features: `allows_duplicates`, `manages_expiry`, `manages_homedir`, `manages_passwords`.","features":["allows_duplicates","manages_expiry","manages_homedir","manages_passwords"]},"aix":{"description":"User management for AIX.\n\n* Required binaries: `/bin/chpasswd`, `/usr/bin/chuser`, `/usr/bin/mkuser`, `/usr/sbin/lsgroup`, `/usr/sbin/lsuser`, `/usr/sbin/rmuser`.\n* Default for `operatingsystem` == `aix`.\n* Supported features: `manages_aix_lam`, `manages_expiry`, `manages_homedir`, `manages_password_age`, `manages_passwords`.","features":["manages_aix_lam","manages_expiry","manages_homedir","manages_password_age","manages_passwords"]},"windows_adsi":{"description":"Local user management for Windows.\n\n* Default for `operatingsystem` == `windows`.\n* Supported features: `manages_homedir`, `manages_passwords`.","features":["manages_homedir","manages_passwords"]},"user_role_add":{"description":"User and role management on Solaris, via `useradd` and `roleadd`.\n\n* Required binaries: `passwd`, `roleadd`, `roledel`, `rolemod`, `useradd`, `userdel`, `usermod`.\n* Default for `osfamily` == `solaris`.\n* Supported features: `allows_duplicates`, `manages_homedir`, `manages_password_age`, `manages_passwords`, `manages_solaris_rbac`.","features":["allows_duplicates","manages_homedir","manages_password_age","manages_passwords","manages_solaris_rbac"]},"directoryservice":{"description":"User management on OS X.\n\n* Required binaries: `/usr/bin/dscacheutil`, `/usr/bin/dscl`, `/usr/bin/dsimport`, `/usr/bin/plutil`, `/usr/bin/uuidgen`.\n* Default for `operatingsystem` == `darwin`.\n* Supported features: `manages_password_salt`, `manages_passwords`.","features":["manages_password_salt","manages_passwords"]},"hpuxuseradd":{"description":"User management for HP-UX. This provider uses the undocumented `-F`\nswitch to HP-UX's special `usermod` binary to work around the fact that\nits standard `usermod` cannot make changes while the user is logged in.\n\n* Required binaries: `/usr/sam/lbin/useradd.sam`, `/usr/sam/lbin/userdel.sam`, `/usr/sam/lbin/usermod.sam`.\n* Default for `operatingsystem` == `hp-ux`.\n* Supported features: `allows_duplicates`, `manages_homedir`, `manages_passwords`.","features":["allows_duplicates","manages_homedir","manages_passwords"]}},"description":"Manage users.  This type is mostly built to manage system\nusers, so it is lacking some features useful for managing normal\nusers.\n\nThis resource type uses the prescribed native tools for creating\ngroups and generally uses POSIX APIs for retrieving information\nabout them.  It does not directly modify `/etc/passwd` or anything.\n\n**Autorequires:** If Puppet is managing the user's primary group (as\nprovided in the `gid` attribute), the user resource will autorequire\nthat group. If Puppet is managing any role accounts corresponding to the\nuser's roles, the user resource will autorequire those role accounts.","features":{"manages_password_salt":"The provider can set a password salt. This is for providers that\nimplement PBKDF2 passwords with salt properties.","manages_passwords":"The provider can modify user passwords, by accepting a password\nhash.","manages_solaris_rbac":"The provider can manage roles and normal users","manages_password_age":"The provider can set age requirements and restrictions for\npasswords.","manages_expiry":"The provider can manage the expiry date for a user.","system_users":"The provider allows you to create system users with lower UIDs.","manages_aix_lam":"The provider can manage AIX Loadable Authentication Module (LAM) system.","libuser":"Allows local users to be managed on systems that also use some other\nremote NSS method of managing accounts.","allows_duplicates":"The provider supports duplicate users with the same UID.","manages_homedir":"The provider can create and remove home directories."},"attributes":{"groups":{"namevar":false,"description":"The groups to which the user belongs.  The primary group should\nnot be listed, and groups should be identified by name rather than by\nGID.  Multiple groups should be specified as an array.","kind":"property"},"password":{"namevar":false,"description":"The user's password, in whatever encrypted format the local\nsystem requires.\n\n* Most modern Unix-like systems use salted SHA1 password hashes. You can use\n  Puppet's built-in `sha1` function to generate a hash from a password.\n* Mac OS X 10.5 and 10.6 also use salted SHA1 hashes.\n* Mac OS X 10.7 (Lion) uses salted SHA512 hashes. The Puppet Labs [stdlib][]\n  module contains a `str2saltedsha512` function which can generate password\n  hashes for Lion.\n* Windows passwords can only be managed in cleartext, as there is no Windows API\n  for setting the password hash.\n\n[stdlib]: https://github.com/puppetlabs/puppetlabs-stdlib/\n\nBe sure to enclose any value that includes a dollar sign ($) in single\nquotes (') to avoid accidental variable interpolation.\n\n\n\nRequires features manages_passwords.","kind":"property"},"managehome":{"namevar":false,"description":"Whether to manage the home directory when managing the user.\nThis will create the home directory when `ensure => present`, and\ndelete the home directory when `ensure => absent`. Defaults to `false`.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"attribute_membership":{"namevar":false,"description":"Whether specified attribute value pairs should be treated as the\n**complete list** (`inclusive`) or the **minimum list** (`minimum`) of\nattribute/value pairs for the user. Defaults to `minimum`.\n\nValid values are `inclusive`, `minimum`.","kind":"parameter"},"salt":{"namevar":false,"description":"This is the 32 byte salt used to generate the PBKDF2 password used in\nOS X\n\n\n\nRequires features manages_password_salt.","kind":"property"},"auths":{"namevar":false,"description":"The auths the user has.  Multiple auths should be\nspecified as an array.\n\n\n\nRequires features manages_solaris_rbac.","kind":"property"},"home":{"namevar":false,"description":"The home directory of the user.  The directory must be created\nseparately and is not currently checked for existence.","kind":"property"},"system":{"namevar":false,"description":"Whether the user is a system user, according to the OS's criteria;\non most platforms, a UID less than or equal to 500 indicates a system\nuser. Defaults to `false`.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"iterations":{"namevar":false,"description":"This is the number of iterations of a chained computation of the\npassword hash (http://en.wikipedia.org/wiki/PBKDF2).  This parameter\nis used in OS X\n\n\n\nRequires features manages_password_salt.","kind":"property"},"allowdupe":{"namevar":false,"description":"Whether to allow duplicate UIDs. Defaults to `false`.\n\nValid values are `true`, `false`, `yes`, `no`.","kind":"parameter"},"profiles":{"namevar":false,"description":"The profiles the user has.  Multiple profiles should be\nspecified as an array.\n\n\n\nRequires features manages_solaris_rbac.","kind":"property"},"expiry":{"namevar":false,"description":"The expiry date for this user. Must be provided in\na zero-padded YYYY-MM-DD format --- e.g. 2010-02-19.\nIf you want to make sure the user account does never\nexpire, you can pass the special value `absent`.\n\nValid values are `absent`. Values can match `/^\\d{4}-\\d{2}-\\d{2}$/`.\n\nRequires features manages_expiry.","kind":"property"},"uid":{"namevar":false,"description":"The user ID; must be specified numerically. If no user ID is\nspecified when creating a new user, then one will be chosen\nautomatically. This will likely result in the same user having\ndifferent UIDs on different systems, which is not recommended. This is\nespecially noteworthy when managing the same user on both Darwin and\nother platforms, since Puppet does UID generation on Darwin, but\nthe underlying tools do so on other platforms.\n\nOn Windows, this property is read-only and will return the user's\nsecurity identifier (SID).","kind":"property"},"profile_membership":{"namevar":false,"description":"Whether specified roles should be treated as the **complete list**\n(`inclusive`) or the **minimum list** (`minimum`) of roles\nof which the user is a member. Defaults to `minimum`.\n\nValid values are `inclusive`, `minimum`.","kind":"parameter"},"ia_load_module":{"namevar":false,"description":"The name of the I&A module to use to manage this user.\n\n\n\nRequires features manages_aix_lam.","kind":"parameter"},"shell":{"namevar":false,"description":"The user's login shell.  The shell must exist and be\nexecutable.\n\nThis attribute cannot be managed on Windows systems.","kind":"property"},"ensure":{"namevar":false,"description":"The basic state that the object should be in.\n\nValid values are `present`, `absent`, `role`.","kind":"property"},"forcelocal":{"namevar":false,"description":"Forces the mangement of local accounts when accounts are also\nbeing managed by some other NSS\n\nValid values are `true`, `false`, `yes`, `no`.\n\nRequires features libuser.","kind":"parameter"},"keys":{"namevar":false,"description":"Specify user attributes in an array of key = value pairs.\n\n\n\nRequires features manages_solaris_rbac.","kind":"property"},"roles":{"namevar":false,"description":"The roles the user has.  Multiple roles should be\nspecified as an array.\n\n\n\nRequires features manages_solaris_rbac.","kind":"property"},"gid":{"namevar":false,"description":"The user's primary group.  Can be specified numerically or by name.\n\nThis attribute is not supported on Windows systems; use the `groups`\nattribute instead. (On Windows, designating a primary group is only\nmeaningful for domain accounts, which Puppet does not currently manage.)","kind":"property"},"name":{"namevar":true,"description":"The user name. While naming limitations vary by operating system,\nit is advisable to restrict names to the lowest common denominator,\nwhich is a maximum of 8 characters beginning with a letter.\n\nNote that Puppet considers user names to be case-sensitive, regardless\nof the platform's own rules; be sure to always use the same case when\nreferring to a given user.","kind":"parameter"},"auth_membership":{"namevar":false,"description":"Whether specified auths should be considered the **complete list**\n(`inclusive`) or the **minimum list** (`minimum`) of auths the user\nhas. Defaults to `minimum`.\n\nValid values are `inclusive`, `minimum`.","kind":"parameter"},"key_membership":{"namevar":false,"description":"Whether specified key/value pairs should be considered the\n**complete list** (`inclusive`) or the **minimum list** (`minimum`) of\nthe user's attributes. Defaults to `minimum`.\n\nValid values are `inclusive`, `minimum`.","kind":"parameter"},"password_min_age":{"namevar":false,"description":"The minimum number of days a password must be used before it may be changed.\n\n\n\nRequires features manages_password_age.","kind":"property"},"comment":{"namevar":false,"description":"A description of the user.  Generally the user's full name.","kind":"property"},"role_membership":{"namevar":false,"description":"Whether specified roles should be considered the **complete list**\n(`inclusive`) or the **minimum list** (`minimum`) of roles the user\nhas. Defaults to `minimum`.\n\nValid values are `inclusive`, `minimum`.","kind":"parameter"},"membership":{"namevar":false,"description":"Whether specified groups should be considered the **complete list**\n(`inclusive`) or the **minimum list** (`minimum`) of groups to which\nthe user belongs. Defaults to `minimum`.\n\nValid values are `inclusive`, `minimum`.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `user`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"attributes":{"namevar":false,"description":"Specify AIX attributes for the user in an array of attribute = value pairs.\n\n\n\nRequires features manages_aix_lam.","kind":"property"},"project":{"namevar":false,"description":"The name of the project associated with a user.\n\n\n\nRequires features manages_solaris_rbac.","kind":"property"},"password_max_age":{"namevar":false,"description":"The maximum number of days a password may be used before it must be changed.\n\n\n\nRequires features manages_password_age.","kind":"property"}}},"k5login":{"providers":{"k5login":{"description":"The k5login provider is the only provider for the k5login\ntype.","features":[]}},"description":"Manage the `.k5login` file for a user.  Specify the full path to\nthe `.k5login` file as the name, and an array of principals as the\n`principals` attribute.","features":{},"attributes":{"principals":{"namevar":false,"description":"The principals present in the `.k5login` file. This should be specified as an array.","kind":"property"},"path":{"namevar":true,"description":"The path to the `.k5login` file to manage.  Must be fully qualified.","kind":"parameter"},"mode":{"namevar":false,"description":"The desired permissions mode of the `.k5login` file. Defaults to `644`.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `k5login`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"mcx":{"providers":{"mcxcontent":{"description":"MCX Settings management using DirectoryService on OS X.\n\nThis provider manages the entire MCXSettings attribute available\nto some directory services nodes.  This management is 'all or nothing'\nin that discrete application domain key value pairs are not managed\nby this provider.\n\nIt is recommended to use WorkGroup Manager to configure Users, Groups,\nComputers, or ComputerLists, then use 'ralsh mcx' to generate a puppet\nmanifest from the resulting configuration.\n\nOriginal Author: Jeff McCune (mccune.jeff@gmail.com)\n\n* Required binaries: `/usr/bin/dscl`.\n* Default for `operatingsystem` == `darwin`.\n* Supported features: `manages_content`.","features":["manages_content"]}},"description":"MCX object management using DirectoryService on OS X.\n\nThe default provider of this type merely manages the XML plist as\nreported by the `dscl -mcxexport` command.  This is similar to the\ncontent property of the file type in Puppet.\n\nThe recommended method of using this type is to use Work Group Manager\nto manage users and groups on the local computer, record the resulting\npuppet manifest using the command `puppet resource mcx`, then deploy it\nto other machines.\n\n**Autorequires:** If Puppet is managing the user, group, or computer that these\nMCX settings refer to, the MCX resource will autorequire that user, group, or computer.","features":{"manages_content":"The provider can manage MCXSettings as a string."},"attributes":{"ds_type":{"namevar":false,"description":"The DirectoryService type this MCX setting attaches to.\n\nValid values are `user`, `group`, `computer`, `computerlist`.","kind":"parameter"},"content":{"namevar":false,"description":"The XML Plist used as the value of MCXSettings in DirectoryService.\nThis is the standard output from the system command:\n\n    dscl localhost -mcxexport /Local/Default/<ds_type>/ds_name\n\nNote that `ds_type` is capitalized and plural in the dscl command.\n\n\n\nRequires features manages_content.","kind":"property"},"ds_name":{"namevar":false,"description":"The name to attach the MCX Setting to. (For example, `localhost`\nwhen `ds_type => computer`.) This setting is not required, as it can be\nautomatically discovered when the resource name is parseable.  (For\nexample, in `/Groups/admin`, `group` will be used as the dstype.)","kind":"parameter"},"ensure":{"namevar":false,"description":"Create or remove the MCX setting.\n\nValid values are `present`, `absent`.","kind":"property"},"name":{"namevar":true,"description":"The name of the resource being managed.\nThe default naming convention follows Directory Service paths:\n\n    /Computers/localhost\n    /Groups/admin\n    /Users/localadmin\n\nThe `ds_type` and `ds_name` type parameters are not necessary if the\ndefault naming convention is followed.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `mcx`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"nagios_contactgroup":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type contactgroup.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_contactgroup.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"contactgroup_name":{"namevar":true,"description":"The name of this nagios_contactgroup resource.","kind":"parameter"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contactgroup_members":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"members":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The target.","kind":"property"},"alias":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_contactgroup`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"selboolean":{"providers":{"getsetsebool":{"description":"Manage SELinux booleans using the getsebool and setsebool binaries.\n\n* Required binaries: `/usr/sbin/getsebool`, `/usr/sbin/setsebool`.","features":[]}},"description":"Manages SELinux booleans on systems with SELinux support.  The supported booleans\nare any of the ones found in `/selinux/booleans/`.","features":{},"attributes":{"persistent":{"namevar":false,"description":"If set true, SELinux booleans will be written to disk and persist accross reboots.\nThe default is `false`.\n\nValid values are `true`, `false`.","kind":"parameter"},"value":{"namevar":false,"description":"Whether the the SELinux boolean should be enabled or disabled.\n\nValid values are `on`, `off`.","kind":"property"},"name":{"namevar":true,"description":"The name of the SELinux boolean to be managed.","kind":"parameter"},"provider":{"namevar":false,"description":"The specific backend to use for this `selboolean`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"ssh_authorized_key":{"providers":{"parsed":{"description":"Parse and generate authorized_keys files for SSH.","features":[]}},"description":"Manages SSH authorized keys. Currently only type 2 keys are\nsupported.\n\n**Autorequires:** If Puppet is managing the user account in which this\nSSH key should be installed, the `ssh_authorized_key` resource will autorequire\nthat user.","features":{},"attributes":{"type":{"namevar":false,"description":"The encryption type used: ssh-dss or ssh-rsa.\n\nValid values are `ssh-dss` (also called `dsa`), `ssh-rsa` (also called `rsa`), `ecdsa-sha2-nistp256`, `ecdsa-sha2-nistp384`, `ecdsa-sha2-nistp521`.","kind":"property"},"key":{"namevar":false,"description":"The public key itself; generally a long string of hex characters. The key attribute\nmay not contain whitespace: Omit key headers (e.g. 'ssh-rsa') and key identifiers\n(e.g. 'joe@joescomputer.local') found in the public key file.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The absolute filename in which to store the SSH key. This\nproperty is optional and should only be used in cases where keys\nare stored in a non-standard location (i.e.` not in\n`~user/.ssh/authorized_keys`).","kind":"property"},"name":{"namevar":true,"description":"The SSH key comment. This attribute is currently used as a\nsystem-wide primary key and therefore has to be unique.","kind":"parameter"},"user":{"namevar":false,"description":"The user account in which the SSH key should be installed.\nThe resource will automatically depend on this user.","kind":"property"},"options":{"namevar":false,"description":"Key options, see sshd(8) for possible values. Multiple values\nshould be specified as an array.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `ssh_authorized_key`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"host":{"providers":{"parsed":{"description":"","features":[]}},"description":"Installs and manages host entries.  For most systems, these\nentries will just be in `/etc/hosts`, but some systems (notably OS X)\nwill have different solutions.","features":{},"attributes":{"ip":{"namevar":false,"description":"The host's IP address, IPv4 or IPv6.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"target":{"namevar":false,"description":"The file in which to store service information.  Only used by\nthose providers that write to disk. On most systems this defaults to `/etc/hosts`.","kind":"property"},"name":{"namevar":true,"description":"The host name.","kind":"parameter"},"comment":{"namevar":false,"description":"A comment that will be attached to the line with a # character.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `host`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"host_aliases":{"namevar":false,"description":"Any aliases the host might have.  Multiple values must be\nspecified as an array.","kind":"property"}}},"interface":{"providers":{"cisco":{"description":"Cisco switch/router provider for interface.","features":[]}},"description":"This represents a router or switch interface. It is possible to manage\ninterface mode (access or trunking, native vlan and encapsulation) and\nswitchport characteristics (speed, duplex).","features":{},"attributes":{"mode":{"namevar":false,"description":"Interface switchport mode.\n\nValid values are `access`, `trunk`.","kind":"property"},"native_vlan":{"namevar":false,"description":"Interface native vlan (for access mode only).\n\nValues can match `/^\\d+/`.","kind":"property"},"device_url":{"namevar":false,"description":"The URL at which the router or switch can be reached.","kind":"parameter"},"allowed_trunk_vlans":{"namevar":false,"description":"Allowed list of Vlans that this trunk can forward.\n\nValid values are `all`. Values can match `/./`.","kind":"property"},"encapsulation":{"namevar":false,"description":"Interface switchport encapsulation.\n\nValid values are `none`, `dot1q`, `isl`.","kind":"property"},"ipaddress":{"namevar":false,"description":"IP Address of this interface. Note that it might not be possible to set\nan interface IP address; it depends on the interface type and device type.\n\nValid format of ip addresses are:\n\n* IPV4, like 127.0.0.1\n* IPV4/prefixlength like 127.0.1.1/24\n* IPV6/prefixlength like FE80::21A:2FFF:FE30:ECF0/128\n* an optional suffix for IPV6 addresses from this list: `eui-64`, `link-local`\n\nIt is also possible to supply an array of values.","kind":"property"},"etherchannel":{"namevar":false,"description":"Channel group this interface is part of.\n\nValues can match `/^\\d+/`.","kind":"property"},"speed":{"namevar":false,"description":"Interface speed.\n\nValid values are `auto`. Values can match `/^\\d+/`.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present` (also called `no_shutdown`), `absent` (also called `shutdown`).","kind":"property"},"duplex":{"namevar":false,"description":"Interface duplex.\n\nValid values are `auto`, `full`, `half`.","kind":"property"},"name":{"namevar":true,"description":"The interface's name.","kind":"parameter"},"description":{"namevar":false,"description":"Interface description.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `interface`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"}}},"nagios_hostescalation":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type hostescalation.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_hostescalation.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"contacts":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"contact_groups":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"first_notification":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notification_interval":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"last_notification":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"hostgroup_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"_naginator_name":{"namevar":true,"description":"The name of this nagios_hostescalation resource.","kind":"parameter"},"target":{"namevar":false,"description":"The target.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"escalation_period":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_hostescalation`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"escalation_options":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}},"nagios_serviceextinfo":{"providers":{"naginator":{"description":"","features":[]}},"description":"The Nagios type serviceextinfo.  This resource type is autogenerated using the\nmodel developed in Naginator, and all of the Nagios types are generated using the\nsame code and the same library.\n\nThis type generates Nagios configuration statements in Nagios-parseable configuration\nfiles.  By default, the statements will be added to `/etc/nagios/nagios_serviceextinfo.cfg`, but\nyou can send them to a different file by setting their `target` attribute.\n\nYou can purge Nagios resources using the `resources` type, but *only*\nin the default file locations.  This is an architectural limitation.","features":{},"attributes":{"icon_image":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"icon_image_alt":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"register":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"ensure":{"namevar":false,"description":"The basic property that the resource should be in.\n\nValid values are `present`, `absent`.","kind":"property"},"_naginator_name":{"namevar":true,"description":"The name of this nagios_serviceextinfo resource.","kind":"parameter"},"target":{"namevar":false,"description":"The target.","kind":"property"},"use":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"notes_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"host_name":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"provider":{"namevar":false,"description":"The specific backend to use for this `nagios_serviceextinfo`\nresource. You will seldom need to specify this --- Puppet will usually\ndiscover the appropriate provider for your platform.","kind":"parameter"},"action_url":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"},"service_description":{"namevar":false,"description":"Nagios configuration file parameter.","kind":"property"}}}}
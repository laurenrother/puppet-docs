---
layout: default
nav: references_man.html
title: puppet instrumentation_probe Man Page
---

<div class='mp'>
<h2 id="NAME">NAME</h2>
<p class="man-name">
  <code>puppet-instrumentation_probe</code> - <span class="man-whatis">Manage instrumentation probes.</span>
</p>

<h2 id="SYNOPSIS">SYNOPSIS</h2>

<p>puppet instrumentation_probe <var>action</var> [--terminus TERMINUS] [--extra HASH]</p>

<h2 id="DESCRIPTION">DESCRIPTION</h2>

<p>This subcommand enables/disables or list instrumentation listeners.</p>

<h2 id="OPTIONS">OPTIONS</h2>

<p>Note that any configuration parameter that's valid in the configuration
file is also a valid long argument, although it may or may not be
relevant to the present action. For example, <code>server</code> and <code>run_mode</code> are valid
configuration parameters, so you can specify <code>--server &lt;servername></code>, or
<code>--run_mode &lt;runmode></code> as an argument.</p>

<p>See the configuration file documentation at
<a data-bare-link="true" href="http://docs.puppetlabs.com/references/stable/configuration.html">http://docs.puppetlabs.com/references/stable/configuration.html</a> for the
full list of acceptable parameters. A commented list of all
configuration options can also be generated by running puppet with
<code>--genconfig</code>.</p>

<dl>
<dt>--render-as FORMAT</dt><dd>The format in which to render output. The most common formats are <code>json</code>,
<code>s</code> (string), <code>yaml</code>, and <code>console</code>, but other options such as <code>dot</code> are
sometimes available.</dd>
<dt>--verbose</dt><dd>Whether to log verbosely.</dd>
<dt class="flush">--debug</dt><dd>Whether to log debug information.</dd>
<dt>--extra HASH</dt><dd>A terminus can take additional arguments to refine the operation, which
are passed as an arbitrary hash to the back-end.  Anything passed as
the extra value is just send direct to the back-end.</dd>
<dt>--terminus TERMINUS</dt><dd><p>Indirector faces expose indirected subsystems of Puppet. These
subsystems are each able to retrieve and alter a specific type of data
(with the familiar actions of <code>find</code>, <code>search</code>, <code>save</code>, and <code>destroy</code>)
from an arbitrary number of pluggable backends. In Puppet parlance,
these backends are called terminuses.</p>

<p>Almost all indirected subsystems have a <code>rest</code> terminus that interacts
with the puppet master's data. Most of them have additional terminuses
for various local data models, which are in turn used by the indirected
subsystem on the puppet master whenever it receives a remote request.</p>

<p>The terminus for an action is often determined by context, but
occasionally needs to be set explicitly. See the "Notes" section of this
face's manpage for more details.</p></dd>
</dl>


<h2 id="ACTIONS">ACTIONS</h2>

<dl>
<dt><code>destroy</code> - API only: disable all instrumentation probes.</dt><dd><p><code>SYNOPSIS</code></p>

<p>puppet instrumentation_probe destroy [--terminus TERMINUS]
[--extra HASH]
<var>dummy</var></p>

<p><code>DESCRIPTION</code></p>

<p>API only: disable all instrumentation probes.</p></dd>
<dt><code>disable</code> - Disable all instrumentation probes.</dt><dd><p><code>SYNOPSIS</code></p>

<p>puppet instrumentation_probe disable [--terminus TERMINUS]
[--extra HASH]
<var>dummy</var></p>

<p><code>DESCRIPTION</code></p>

<p>Disable all instrumentation probes. After being disabled, no listeners
will receive instrumentation notifications.</p>

<p><code>RETURNS</code></p>

<p>Nothing.</p></dd>
<dt><code>enable</code> - Enable all instrumentation probes.</dt><dd><p><code>SYNOPSIS</code></p>

<p>puppet instrumentation_probe enable [--terminus TERMINUS]
[--extra HASH]
<var>dummy</var></p>

<p><code>DESCRIPTION</code></p>

<p>Enable all instrumentation probes. After being enabled, all enabled listeners
will start receiving instrumentation notifications from the probes.</p>

<p><code>RETURNS</code></p>

<p>Nothing.</p></dd>
<dt><code>find</code> - Invalid for this subcommand.</dt><dd><p><code>SYNOPSIS</code></p>

<p>puppet instrumentation_probe find [--terminus TERMINUS] [--extra HASH] <var>key</var></p>

<p><code>DESCRIPTION</code></p>

<p>Invalid for this subcommand.</p></dd>
<dt><code>info</code> - Print the default terminus class for this face.</dt><dd><p><code>SYNOPSIS</code></p>

<p>puppet instrumentation_probe info [--terminus TERMINUS] [--extra HASH]</p>

<p><code>DESCRIPTION</code></p>

<p>Prints the default terminus class for this subcommand. Note that different
run modes may have different default termini; when in doubt, specify the
run mode with the '--run_mode' option.</p></dd>
<dt><code>save</code> - API only: enable all instrumentation probes.</dt><dd><p><code>SYNOPSIS</code></p>

<p>puppet instrumentation_probe save [--terminus TERMINUS] [--extra HASH] <var>dummy</var></p>

<p><code>DESCRIPTION</code></p>

<p>API only: create or overwrite an object. As the Faces framework does not
currently accept data from STDIN, save actions cannot currently be invoked
from the command line.</p></dd>
<dt><code>search</code> - Retrieve all probe statuses.</dt><dd><p><code>SYNOPSIS</code></p>

<p>puppet instrumentation_probe search [--terminus TERMINUS]
[--extra HASH]
<var>dummy_text</var></p>

<p><code>DESCRIPTION</code></p>

<p>Retrieve all probe statuses.</p>

<p><code>RETURNS</code></p>

<pre><code>The statuses of all instrumentation probes
</code></pre>

<p><code>NOTES</code></p>

<p>Although this action always returns all instrumentation probes, it requires a dummy search
key; this is a known bug.</p></dd>
</dl>


<h2 id="EXAMPLES">EXAMPLES</h2>

<p><code>disable</code></p>

<p>Disable the probes for the running master:</p>

<p>$ puppet instrumentation_probe disable x --terminus rest</p>

<p><code>enable</code></p>

<p>Enable the probes for the running master:</p>

<p>$ puppet instrumentation_probe enable x --terminus rest</p>

<p><code>search</code></p>

<p>Retrieve the state of the probes running in the remote puppet master:</p>

<p>$ puppet instrumentation_probe search x --terminus rest</p>

<h2 id="NOTES">NOTES</h2>

<p>This subcommand is an indirector face, which exposes <code>find</code>, <code>search</code>, <code>save</code>,
and <code>destroy</code> actions for an indirected subsystem of Puppet. Valid termini for
this face include:</p>

<ul>
<li><code>local</code></li>
<li><code>rest</code></li>
</ul>


<h2 id="COPYRIGHT-AND-LICENSE">COPYRIGHT AND LICENSE</h2>

<p>Copyright 2011 by Puppet Labs
Apache 2 license; see COPYING</p>

</div>

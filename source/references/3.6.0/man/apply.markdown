---
layout: default
nav: references_man.html
title: puppet apply Man Page
---

<div class='mp'>
<h2 id="NAME">NAME</h2>
<p class="man-name">
  <code>puppet-apply</code> - <span class="man-whatis">Apply Puppet manifests locally</span>
</p>

<h2 id="SYNOPSIS">SYNOPSIS</h2>

<p>Applies a standalone Puppet manifest to the local system.</p>

<h2 id="USAGE">USAGE</h2>

<p>puppet apply [-h|--help] [-V|--version] [-d|--debug] [-v|--verbose]
  [-e|--execute] [--detailed-exitcodes] [-l|--logdest <var>file</var>] [--noop]
  [--catalog <var>catalog</var>] [--write-catalog-summary] <var>file</var></p>

<h2 id="DESCRIPTION">DESCRIPTION</h2>

<p>This is the standalone puppet execution tool; use it to apply
individual manifests.</p>

<p>When provided with a modulepath, via command line or config file, puppet
apply can effectively mimic the catalog that would be served by puppet
master with access to the same modules, although there are some subtle
differences. When combined with scheduling and an automated system for
pushing manifests, this can be used to implement a serverless Puppet
site.</p>

<p>Most users should use 'puppet agent' and 'puppet master' for site-wide
manifests.</p>

<h2 id="OPTIONS">OPTIONS</h2>

<p>Note that any setting that's valid in the configuration
file is also a valid long argument. For example, 'tags' is a
valid setting, so you can specify '--tags <var>class</var>,<var>tag</var>'
as an argument.</p>

<p>See the configuration file documentation at
http://docs.puppetlabs.com/references/stable/configuration.html for the
full list of acceptable parameters. A commented list of all
configuration options can also be generated by running puppet with
'--genconfig'.</p>

<ul>
<li><p>--debug:
Enable full debugging.</p></li>
<li><p>--detailed-exitcodes:
Provide transaction information via exit codes. If this is enabled, an exit
code of '2' means there were changes, an exit code of '4' means there were
failures during the transaction, and an exit code of '6' means there were both
changes and failures.</p></li>
<li><p>--help:
Print this help message</p></li>
<li><p>--loadclasses:
Load any stored classes. 'puppet agent' caches configured classes
(usually at /etc/puppet/classes.txt), and setting this option causes
all of those classes to be set in your puppet manifest.</p></li>
<li><p>--logdest:
Where to send messages. Choose between syslog, the console, and a log
file. Defaults to sending messages to the console.</p></li>
<li><p>--noop:
Use 'noop' mode where Puppet runs in a no-op or dry-run mode. This
is useful for seeing what changes Puppet will make without actually
executing the changes.</p></li>
<li><p>--execute:
Execute a specific piece of Puppet code</p></li>
<li><p>--test:
Enable the most common options used for testing. These are 'verbose',
'detailed-exitcodes' and 'show_diff'.</p></li>
<li><p>--verbose:
Print extra information.</p></li>
<li><p>--catalog:
Apply a JSON catalog (such as one generated with 'puppet master --compile'). You can
either specify a JSON file or pipe in JSON from standard input.</p></li>
<li><p>--write-catalog-summary
After compiling the catalog saves the resource list and classes list to the node
in the state directory named classes.txt and resources.txt</p></li>
</ul>


<h2 id="EXAMPLE">EXAMPLE</h2>

<pre><code>$ puppet apply -l /tmp/manifest.log manifest.pp
$ puppet apply --modulepath=/root/dev/modules -e "include ntpd::server"
$ puppet apply --catalog catalog.json
</code></pre>

<h2 id="AUTHOR">AUTHOR</h2>

<p>Luke Kanies</p>

<h2 id="COPYRIGHT">COPYRIGHT</h2>

<p>Copyright (c) 2011 Puppet Labs, LLC Licensed under the Apache 2.0 License</p>

</div>
